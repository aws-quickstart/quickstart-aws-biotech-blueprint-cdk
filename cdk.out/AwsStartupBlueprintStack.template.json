{
  "Description": "The AWS Startup Blueprint is a strongly opinionated architecture for any Startup looking to start using AWS follwing best practices on day 1. (ib-7061756C75)",
  "Resources": {
    "VpcCoreProductionD971AE3A": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.50.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/Resource"
      }
    },
    "VpcCoreProductionDMZSubnet1Subnet8CB63360": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.50.0.0/23",
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "DMZ"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1/Subnet"
      }
    },
    "VpcCoreProductionDMZSubnet1RouteTable93117E8B": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1/RouteTable"
      }
    },
    "VpcCoreProductionDMZSubnet1RouteTableAssociation4C99EF6F": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDMZSubnet1RouteTable93117E8B"
        },
        "SubnetId": {
          "Ref": "VpcCoreProductionDMZSubnet1Subnet8CB63360"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreProductionDMZSubnet1DefaultRoute078E8974": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDMZSubnet1RouteTable93117E8B"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcCoreProductionIGW5A93E1A8"
        }
      },
      "DependsOn": [
        "VpcCoreProductionVPCGW30B6BDB2"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1/DefaultRoute"
      }
    },
    "VpcCoreProductionDMZSubnet1EIP624812A4": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1/EIP"
      }
    },
    "VpcCoreProductionDMZSubnet1NATGatewayC224625E": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcCoreProductionDMZSubnet1EIP624812A4",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "VpcCoreProductionDMZSubnet1Subnet8CB63360"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1/NATGateway"
      }
    },
    "VpcCoreProductionDMZSubnet2Subnet544A7F20": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.50.2.0/23",
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "DMZ"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet2/Subnet"
      }
    },
    "VpcCoreProductionDMZSubnet2RouteTable280A8E86": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet2/RouteTable"
      }
    },
    "VpcCoreProductionDMZSubnet2RouteTableAssociation1698D572": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDMZSubnet2RouteTable280A8E86"
        },
        "SubnetId": {
          "Ref": "VpcCoreProductionDMZSubnet2Subnet544A7F20"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreProductionDMZSubnet2DefaultRoute3F9FD113": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDMZSubnet2RouteTable280A8E86"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcCoreProductionIGW5A93E1A8"
        }
      },
      "DependsOn": [
        "VpcCoreProductionVPCGW30B6BDB2"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet2/DefaultRoute"
      }
    },
    "VpcCoreProductionApplicationSubnet1SubnetE209B72D": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.50.4.0/23",
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Application"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet1/Subnet"
      }
    },
    "VpcCoreProductionApplicationSubnet1RouteTableC5D4BB39": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet1/RouteTable"
      }
    },
    "VpcCoreProductionApplicationSubnet1RouteTableAssociation7EDAC97B": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionApplicationSubnet1RouteTableC5D4BB39"
        },
        "SubnetId": {
          "Ref": "VpcCoreProductionApplicationSubnet1SubnetE209B72D"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreProductionApplicationSubnet1DefaultRouteA2D6D34E": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionApplicationSubnet1RouteTableC5D4BB39"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcCoreProductionDMZSubnet1NATGatewayC224625E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet1/DefaultRoute"
      }
    },
    "VpcCoreProductionApplicationSubnet2SubnetFF60B9F3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.50.6.0/23",
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Application"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet2/Subnet"
      }
    },
    "VpcCoreProductionApplicationSubnet2RouteTable4DF63A0C": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet2/RouteTable"
      }
    },
    "VpcCoreProductionApplicationSubnet2RouteTableAssociation7D462ED9": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionApplicationSubnet2RouteTable4DF63A0C"
        },
        "SubnetId": {
          "Ref": "VpcCoreProductionApplicationSubnet2SubnetFF60B9F3"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreProductionApplicationSubnet2DefaultRoute115CEEEB": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionApplicationSubnet2RouteTable4DF63A0C"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcCoreProductionDMZSubnet1NATGatewayC224625E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet2/DefaultRoute"
      }
    },
    "VpcCoreProductionDatabaseSubnet1Subnet09EF33D9": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.50.8.0/23",
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Database"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet1/Subnet"
      }
    },
    "VpcCoreProductionDatabaseSubnet1RouteTable4189D151": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet1/RouteTable"
      }
    },
    "VpcCoreProductionDatabaseSubnet1RouteTableAssociationD1A8D4E9": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDatabaseSubnet1RouteTable4189D151"
        },
        "SubnetId": {
          "Ref": "VpcCoreProductionDatabaseSubnet1Subnet09EF33D9"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreProductionDatabaseSubnet2Subnet128DE8A2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.50.10.0/23",
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Database"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet2/Subnet"
      }
    },
    "VpcCoreProductionDatabaseSubnet2RouteTable72412D1A": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet2/RouteTable"
      }
    },
    "VpcCoreProductionDatabaseSubnet2RouteTableAssociation63113979": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDatabaseSubnet2RouteTable72412D1A"
        },
        "SubnetId": {
          "Ref": "VpcCoreProductionDatabaseSubnet2Subnet128DE8A2"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreProductionIGW5A93E1A8": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/IGW"
      }
    },
    "VpcCoreProductionVPCGW30B6BDB2": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "InternetGatewayId": {
          "Ref": "VpcCoreProductionIGW5A93E1A8"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/VPCGW"
      }
    },
    "VpcCoreProductionS39B8E42EB": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".s3"
            ]
          ]
        },
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "RouteTableIds": [
          {
            "Ref": "VpcCoreProductionApplicationSubnet1RouteTableC5D4BB39"
          },
          {
            "Ref": "VpcCoreProductionApplicationSubnet2RouteTable4DF63A0C"
          },
          {
            "Ref": "VpcCoreProductionDMZSubnet1RouteTable93117E8B"
          },
          {
            "Ref": "VpcCoreProductionDMZSubnet2RouteTable280A8E86"
          },
          {
            "Ref": "VpcCoreProductionDatabaseSubnet1RouteTable4189D151"
          },
          {
            "Ref": "VpcCoreProductionDatabaseSubnet2RouteTable72412D1A"
          }
        ],
        "VpcEndpointType": "Gateway"
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/S3/Resource"
      }
    },
    "VpcCoreDevelopment37E2B994": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.60.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/Resource"
      }
    },
    "VpcCoreDevelopmentDMZSubnet1SubnetD48B44F5": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.60.0.0/23",
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "DMZ"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1/Subnet"
      }
    },
    "VpcCoreDevelopmentDMZSubnet1RouteTable8E3AF8CC": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1/RouteTable"
      }
    },
    "VpcCoreDevelopmentDMZSubnet1RouteTableAssociationB1D7A6B7": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet1RouteTable8E3AF8CC"
        },
        "SubnetId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet1SubnetD48B44F5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreDevelopmentDMZSubnet1DefaultRouteC1A58F2B": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet1RouteTable8E3AF8CC"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcCoreDevelopmentIGWAD83048D"
        }
      },
      "DependsOn": [
        "VpcCoreDevelopmentVPCGW9558AC45"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1/DefaultRoute"
      }
    },
    "VpcCoreDevelopmentDMZSubnet1EIP58CD3212": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1/EIP"
      }
    },
    "VpcCoreDevelopmentDMZSubnet1NATGatewayD5175E96": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcCoreDevelopmentDMZSubnet1EIP58CD3212",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet1SubnetD48B44F5"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1/NATGateway"
      }
    },
    "VpcCoreDevelopmentDMZSubnet2SubnetD5020296": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.60.2.0/23",
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "DMZ"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet2/Subnet"
      }
    },
    "VpcCoreDevelopmentDMZSubnet2RouteTable1EB1E7D2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet2/RouteTable"
      }
    },
    "VpcCoreDevelopmentDMZSubnet2RouteTableAssociationAD80DA52": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet2RouteTable1EB1E7D2"
        },
        "SubnetId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet2SubnetD5020296"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreDevelopmentDMZSubnet2DefaultRoute705CC16F": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet2RouteTable1EB1E7D2"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcCoreDevelopmentIGWAD83048D"
        }
      },
      "DependsOn": [
        "VpcCoreDevelopmentVPCGW9558AC45"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet2/DefaultRoute"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet1Subnet5A750B62": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.60.4.0/23",
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Application"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet1/Subnet"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet1RouteTableD5BB8081": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet1/RouteTable"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet1RouteTableAssociationFD1A2A22": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet1RouteTableD5BB8081"
        },
        "SubnetId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet1Subnet5A750B62"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet1DefaultRoute1731A859": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet1RouteTableD5BB8081"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet1NATGatewayD5175E96"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet1/DefaultRoute"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet2Subnet3230F190": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.60.6.0/23",
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Application"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet2/Subnet"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet2RouteTableFDC2C351": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet2/RouteTable"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet2RouteTableAssociation7C43FB1B": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet2RouteTableFDC2C351"
        },
        "SubnetId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet2Subnet3230F190"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet2DefaultRouteA9C5EE12": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet2RouteTableFDC2C351"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet1NATGatewayD5175E96"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet2/DefaultRoute"
      }
    },
    "VpcCoreDevelopmentDatabaseSubnet1Subnet08D67DFC": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.60.8.0/23",
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Database"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet1/Subnet"
      }
    },
    "VpcCoreDevelopmentDatabaseSubnet1RouteTableB0F16F62": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet1/RouteTable"
      }
    },
    "VpcCoreDevelopmentDatabaseSubnet1RouteTableAssociation386F1245": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDatabaseSubnet1RouteTableB0F16F62"
        },
        "SubnetId": {
          "Ref": "VpcCoreDevelopmentDatabaseSubnet1Subnet08D67DFC"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreDevelopmentDatabaseSubnet2Subnet05D038F0": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.60.10.0/23",
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Database"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet2/Subnet"
      }
    },
    "VpcCoreDevelopmentDatabaseSubnet2RouteTable07847265": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet2/RouteTable"
      }
    },
    "VpcCoreDevelopmentDatabaseSubnet2RouteTableAssociation43E36BB0": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDatabaseSubnet2RouteTable07847265"
        },
        "SubnetId": {
          "Ref": "VpcCoreDevelopmentDatabaseSubnet2Subnet05D038F0"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreDevelopmentIGWAD83048D": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/IGW"
      }
    },
    "VpcCoreDevelopmentVPCGW9558AC45": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "InternetGatewayId": {
          "Ref": "VpcCoreDevelopmentIGWAD83048D"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/VPCGW"
      }
    },
    "VpcCoreDevelopmentS37F7BBD0F": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".s3"
            ]
          ]
        },
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "RouteTableIds": [
          {
            "Ref": "VpcCoreDevelopmentApplicationSubnet1RouteTableD5BB8081"
          },
          {
            "Ref": "VpcCoreDevelopmentApplicationSubnet2RouteTableFDC2C351"
          },
          {
            "Ref": "VpcCoreDevelopmentDMZSubnet1RouteTable8E3AF8CC"
          },
          {
            "Ref": "VpcCoreDevelopmentDMZSubnet2RouteTable1EB1E7D2"
          },
          {
            "Ref": "VpcCoreDevelopmentDatabaseSubnet1RouteTableB0F16F62"
          },
          {
            "Ref": "VpcCoreDevelopmentDatabaseSubnet2RouteTable07847265"
          }
        ],
        "VpcEndpointType": "Gateway"
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/S3/Resource"
      }
    },
    "VpcCoreManagment030DB556": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.70.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/Resource"
      }
    },
    "VpcCoreManagmentDMZSubnet1Subnet3D4DB21E": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.70.0.0/23",
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "DMZ"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1/Subnet"
      }
    },
    "VpcCoreManagmentDMZSubnet1RouteTableA3569583": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1/RouteTable"
      }
    },
    "VpcCoreManagmentDMZSubnet1RouteTableAssociationCB71CE11": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet1RouteTableA3569583"
        },
        "SubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet1Subnet3D4DB21E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreManagmentDMZSubnet1DefaultRouteB7ED8FC9": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet1RouteTableA3569583"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcCoreManagmentIGWE905604F"
        }
      },
      "DependsOn": [
        "VpcCoreManagmentVPCGW52A2E34D"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1/DefaultRoute"
      }
    },
    "VpcCoreManagmentDMZSubnet1EIP7EFCA2AF": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1/EIP"
      }
    },
    "VpcCoreManagmentDMZSubnet1NATGatewayC5BFB186": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcCoreManagmentDMZSubnet1EIP7EFCA2AF",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet1Subnet3D4DB21E"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1/NATGateway"
      }
    },
    "VpcCoreManagmentDMZSubnet2SubnetB133424E": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.70.2.0/23",
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "DMZ"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet2/Subnet"
      }
    },
    "VpcCoreManagmentDMZSubnet2RouteTable6C5999E3": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet2/RouteTable"
      }
    },
    "VpcCoreManagmentDMZSubnet2RouteTableAssociation642ADD19": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet2RouteTable6C5999E3"
        },
        "SubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet2SubnetB133424E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreManagmentDMZSubnet2DefaultRoute05771B64": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet2RouteTable6C5999E3"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcCoreManagmentIGWE905604F"
        }
      },
      "DependsOn": [
        "VpcCoreManagmentVPCGW52A2E34D"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet2/DefaultRoute"
      }
    },
    "VpcCoreManagmentApplicationSubnet1Subnet1DE5C8C4": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.70.4.0/23",
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Application"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet1/Subnet"
      }
    },
    "VpcCoreManagmentApplicationSubnet1RouteTable12C52E22": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet1/RouteTable"
      }
    },
    "VpcCoreManagmentApplicationSubnet1RouteTableAssociation06F8E2E2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet1RouteTable12C52E22"
        },
        "SubnetId": {
          "Ref": "VpcCoreManagmentApplicationSubnet1Subnet1DE5C8C4"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreManagmentApplicationSubnet1DefaultRoute2CE87E61": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet1RouteTable12C52E22"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcCoreManagmentDMZSubnet1NATGatewayC5BFB186"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet1/DefaultRoute"
      }
    },
    "VpcCoreManagmentApplicationSubnet2SubnetF1B8CE48": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.70.6.0/23",
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Application"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet2/Subnet"
      }
    },
    "VpcCoreManagmentApplicationSubnet2RouteTableFD53ABE8": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet2/RouteTable"
      }
    },
    "VpcCoreManagmentApplicationSubnet2RouteTableAssociationD38A75C2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet2RouteTableFD53ABE8"
        },
        "SubnetId": {
          "Ref": "VpcCoreManagmentApplicationSubnet2SubnetF1B8CE48"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreManagmentApplicationSubnet2DefaultRoute05B09043": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet2RouteTableFD53ABE8"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcCoreManagmentDMZSubnet1NATGatewayC5BFB186"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet2/DefaultRoute"
      }
    },
    "VpcCoreManagmentIGWE905604F": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/IGW"
      }
    },
    "VpcCoreManagmentVPCGW52A2E34D": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "InternetGatewayId": {
          "Ref": "VpcCoreManagmentIGWE905604F"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/VPCGW"
      }
    },
    "VpcCoreManagmentToProductionPeering22C33F18": {
      "Type": "AWS::EC2::VPCPeeringConnection",
      "Properties": {
        "PeerVpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/ManagmentToProductionPeering"
      }
    },
    "VpcCoreManagmentToDevelopmentPeering3A7C248E": {
      "Type": "AWS::EC2::VPCPeeringConnection",
      "Properties": {
        "PeerVpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/ManagmentToDevelopmentPeering"
      }
    },
    "VpcCoremgmtPublicToDev00CE2841B": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet1RouteTableA3569583"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreDevelopment37E2B994",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPublicToDev-0"
      }
    },
    "VpcCoremgmtPublicToDev11C8BD95A": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet2RouteTable6C5999E3"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreDevelopment37E2B994",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPublicToDev-1"
      }
    },
    "VpcCoremgmtPrivateToDev0786AB1D9": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet1RouteTable12C52E22"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreDevelopment37E2B994",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPrivateToDev-0"
      }
    },
    "VpcCoremgmtPrivateToDev19BBE4CA7": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet2RouteTableFD53ABE8"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreDevelopment37E2B994",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPrivateToDev-1"
      }
    },
    "VpcCoredevPublicToMgmt0A0CBE086": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet1RouteTable8E3AF8CC"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/devPublicToMgmt-0"
      }
    },
    "VpcCoredevPublicToMgmt17BB06B4B": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet2RouteTable1EB1E7D2"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/devPublicToMgmt-1"
      }
    },
    "VpcCoredevPrivateToMgmt015322763": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet1RouteTableD5BB8081"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/devPrivateToMgmt-0"
      }
    },
    "VpcCoredevPrivateToMgmt18C0769D9": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet2RouteTableFDC2C351"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/devPrivateToMgmt-1"
      }
    },
    "VpcCoredevIsolatedToMgmt06FAE198F": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDatabaseSubnet1RouteTableB0F16F62"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/devIsolatedToMgmt-0"
      }
    },
    "VpcCoredevIsolatedToMgmt1D9C968A0": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDatabaseSubnet2RouteTable07847265"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/devIsolatedToMgmt-1"
      }
    },
    "VpcCoremgmtPublicToProd09E91CB4A": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet1RouteTableA3569583"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreProductionD971AE3A",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPublicToProd-0"
      }
    },
    "VpcCoremgmtPublicToProd13B87535A": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet2RouteTable6C5999E3"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreProductionD971AE3A",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPublicToProd-1"
      }
    },
    "VpcCoremgmtPrivateToProd02E427081": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet1RouteTable12C52E22"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreProductionD971AE3A",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPrivateToProd-0"
      }
    },
    "VpcCoremgmtPrivateToProd190B37EA5": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet2RouteTableFD53ABE8"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreProductionD971AE3A",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPrivateToProd-1"
      }
    },
    "VpcCoreprodPublicToMgmt0A4005CA8": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDMZSubnet1RouteTable93117E8B"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/prodPublicToMgmt-0"
      }
    },
    "VpcCoreprodPublicToMgmt1EC8240AC": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDMZSubnet2RouteTable280A8E86"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/prodPublicToMgmt-1"
      }
    },
    "VpcCoreprodPrivateToMgmt0A8B14018": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionApplicationSubnet1RouteTableC5D4BB39"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/prodPrivateToMgmt-0"
      }
    },
    "VpcCoreprodPrivateToMgmt1C6119F45": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionApplicationSubnet2RouteTable4DF63A0C"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/prodPrivateToMgmt-1"
      }
    },
    "ClientVpnVpnCertificateLambdaCustomResourceRole042AF384": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/VpnCertificateLambdaCustomResourceRole/Resource"
      }
    },
    "ClientVpnVpnCertificateLambdaCustomResourceRoleDefaultPolicyBC6B56F1": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "acm:ImportCertificate",
                "acm:DeleteCertificate"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ClientVpnVpnConfigBucketF2E04B98",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ClientVpnVpnConfigBucketF2E04B98",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClientVpnVpnCertificateLambdaCustomResourceRoleDefaultPolicyBC6B56F1",
        "Roles": [
          {
            "Ref": "ClientVpnVpnCertificateLambdaCustomResourceRole042AF384"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/VpnCertificateLambdaCustomResourceRole/DefaultPolicy/Resource"
      }
    },
    "ClientVpnVpnConfigBucketF2E04B98": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/VpnConfigBucket/Resource"
      }
    },
    "ClientVpnvpnCertificate550A99D6": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SingletonLambdaCreateVpnCertificateLambda14FF3DCC",
            "Arn"
          ]
        },
        "VpnConfigBucket": {
          "Fn::Join": [
            "",
            [
              "s3://",
              {
                "Ref": "ClientVpnVpnConfigBucketF2E04B98"
              },
              "/"
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/vpnCertificate/Default"
      }
    },
    "ClientVpnClientVpnAccessLogGroup8491CD05": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 180
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/ClientVpnAccessLogGroup/Resource"
      }
    },
    "ClientVpnClientVpnAccessLogStream5480C352": {
      "Type": "AWS::Logs::LogStream",
      "Properties": {
        "LogGroupName": {
          "Ref": "ClientVpnClientVpnAccessLogGroup8491CD05"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/ClientVpnAccessLogStream/Resource"
      }
    },
    "ClientVpnVpnUsersSG5BB5DCBE": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group associated with VPN users accessing the network through the Client VPN Endpoint in the managment VPC.",
        "GroupName": "VpnUsersSG",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/VpnUsersSG/Resource"
      }
    },
    "ClientVpnclientVpnEndpoint53D29AAC": {
      "Type": "AWS::EC2::ClientVpnEndpoint",
      "Properties": {
        "AuthenticationOptions": [
          {
            "MutualAuthentication": {
              "ClientRootCertificateChainArn": {
                "Ref": "ClientVpnvpnCertificate550A99D6"
              }
            },
            "Type": "certificate-authentication"
          }
        ],
        "ClientCidrBlock": "10.71.0.0/16",
        "ConnectionLogOptions": {
          "CloudwatchLogGroup": {
            "Ref": "ClientVpnClientVpnAccessLogGroup8491CD05"
          },
          "CloudwatchLogStream": {
            "Ref": "ClientVpnClientVpnAccessLogStream5480C352"
          },
          "Enabled": true
        },
        "ServerCertificateArn": {
          "Ref": "ClientVpnvpnCertificate550A99D6"
        },
        "Description": "Internal VPN Endpoint",
        "DnsServers": [
          "10.70.0.2"
        ],
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "ClientVpnVpnUsersSG5BB5DCBE",
              "GroupId"
            ]
          }
        ],
        "SplitTunnel": true,
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/clientVpnEndpoint"
      }
    },
    "ClientVpn0clientVpnEndpointAssociation8160B577": {
      "Type": "AWS::EC2::ClientVpnTargetNetworkAssociation",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "SubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet1Subnet3D4DB21E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/0-clientVpnEndpointAssociation"
      }
    },
    "ClientVpn1clientVpnEndpointAssociation19D93CB9": {
      "Type": "AWS::EC2::ClientVpnTargetNetworkAssociation",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "SubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet2SubnetB133424E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/1-clientVpnEndpointAssociation"
      }
    },
    "ClientVpnProductionAuthorization8EEF0591": {
      "Type": "AWS::EC2::ClientVpnAuthorizationRule",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "TargetNetworkCidr": {
          "Fn::GetAtt": [
            "VpcCoreProductionD971AE3A",
            "CidrBlock"
          ]
        },
        "AuthorizeAllGroups": true,
        "Description": "Allows VPN users access to Production VPC"
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/ProductionAuthorization"
      }
    },
    "ClientVpnDevelopmentAuthorizationF2F84AF6": {
      "Type": "AWS::EC2::ClientVpnAuthorizationRule",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "TargetNetworkCidr": {
          "Fn::GetAtt": [
            "VpcCoreDevelopment37E2B994",
            "CidrBlock"
          ]
        },
        "AuthorizeAllGroups": true,
        "Description": "Allows VPN users access to Development VPC"
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/DevelopmentAuthorization"
      }
    },
    "ClientVpnManagmentAuthorization5FD7AAA7": {
      "Type": "AWS::EC2::ClientVpnAuthorizationRule",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "TargetNetworkCidr": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "AuthorizeAllGroups": true,
        "Description": "Allows Transit VPN users access to Managment VPC"
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/ManagmentAuthorization"
      }
    },
    "ClientVpn0productionRoute7AD177DA": {
      "Type": "AWS::EC2::ClientVpnRoute",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreProductionD971AE3A",
            "CidrBlock"
          ]
        },
        "TargetVpcSubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet1Subnet3D4DB21E"
        }
      },
      "DependsOn": [
        "ClientVpn0clientVpnEndpointAssociation8160B577",
        "ClientVpn1clientVpnEndpointAssociation19D93CB9"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/0-productionRoute"
      }
    },
    "ClientVpn0developmentRouteDE605129": {
      "Type": "AWS::EC2::ClientVpnRoute",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreDevelopment37E2B994",
            "CidrBlock"
          ]
        },
        "TargetVpcSubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet1Subnet3D4DB21E"
        }
      },
      "DependsOn": [
        "ClientVpn0clientVpnEndpointAssociation8160B577",
        "ClientVpn1clientVpnEndpointAssociation19D93CB9"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/0-developmentRoute"
      }
    },
    "ClientVpn1productionRouteE229C4FD": {
      "Type": "AWS::EC2::ClientVpnRoute",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreProductionD971AE3A",
            "CidrBlock"
          ]
        },
        "TargetVpcSubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet2SubnetB133424E"
        }
      },
      "DependsOn": [
        "ClientVpn0clientVpnEndpointAssociation8160B577",
        "ClientVpn1clientVpnEndpointAssociation19D93CB9"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/1-productionRoute"
      }
    },
    "ClientVpn1developmentRouteBB456F2F": {
      "Type": "AWS::EC2::ClientVpnRoute",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreDevelopment37E2B994",
            "CidrBlock"
          ]
        },
        "TargetVpcSubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet2SubnetB133424E"
        }
      },
      "DependsOn": [
        "ClientVpn0clientVpnEndpointAssociation8160B577",
        "ClientVpn1clientVpnEndpointAssociation19D93CB9"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/1-developmentRoute"
      }
    },
    "SingletonLambdaCreateVpnCertificateLambda14FF3DCC": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "Q=True\nP='/tmp/'\nO='ErrorMessage'\nN='VpnConfigBucket'\nM='ResourceProperties'\nL=False\nK=Exception\nimport subprocess as D\nimport os\nimport sys\nimport boto3 as E\nimport logging as G\nimport json\nimport cfnresponse\nfrom botocore.vendored import requests\nimport traceback\nR=E.client('ec2')\nS=E.client('ssm')\nH=E.client('acm')\nB=G.getLogger()\nB.setLevel(G.INFO)\nA={}\ndef I(event,context,isUpdate=L):\n\tF=context;E=event\n\ttry:\n\t\tA['Complete']='True';G=E['PhysicalResourceId'];D=E[M][N];J=['aws s3 rm {0}ca.crt'.format(D),'aws s3 rm {0}server.crt'.format(D),'aws s3 rm {0}server.key'.format(D),'aws s3 rm {0}client1.domain.tld.crt'.format(D),'aws s3 rm {0}client1.domain.tld.key'.format(D)];Q=C(J);H.delete_certificate(CertificateArn=G)\n\t\tif isUpdate==L:cfnresponse.send(E,F,cfnresponse.SUCCESS,A,G)\n\texcept K as I:B.error(I);P=I.args[0];R={O:P};cfnresponse.send(E,F,cfnresponse.FAILED,A)\ndef J(event,context):\n\tG=context;E=event\n\ttry:D=E[M][N];J=['curl -L https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.6/EasyRSA-unix-v3.0.6.tgz -O','mkdir /tmp/easyrsa','mkdir /tmp/vpndetails','tar -xvzf /tmp/EasyRSA-unix-v3.0.6.tgz -C /tmp/easyrsa','ls /tmp/easyrsa'];C(J);L=['/tmp/easyrsa/EasyRSA-v3.0.6/easyrsa init-pki','/tmp/easyrsa/EasyRSA-v3.0.6/easyrsa build-ca nopass','/tmp/easyrsa/EasyRSA-v3.0.6/easyrsa build-server-full server nopass','/tmp/easyrsa/EasyRSA-v3.0.6/easyrsa build-client-full client1.domain.tld nopass','cp /tmp/pki/ca.crt /tmp/vpndetails/ca.crt','cp /tmp/pki/issued/server.crt /tmp/vpndetails/server.crt','cp /tmp/pki/private/server.key /tmp/vpndetails/server.key','cp /tmp/pki/issued/client1.domain.tld.crt /tmp/vpndetails/client1.domain.tld.crt','cp /tmp/pki/private/client1.domain.tld.key /tmp/vpndetails/client1.domain.tld.key'];C(L,'/tmp/easy-rsa/EasyRSA-v3.0.6');P=H.import_certificate(Certificate=F('/tmp/vpndetails/server.crt'),PrivateKey=F('/tmp/vpndetails/server.key'),CertificateChain=F('/tmp/vpndetails/ca.crt'));Q=['aws s3 cp /tmp/vpndetails/ca.crt {0}ca.crt'.format(D),'aws s3 cp /tmp/vpndetails/server.crt {0}server.crt'.format(D),'aws s3 cp /tmp/vpndetails/server.key {0}server.key'.format(D),'aws s3 cp /tmp/vpndetails/client1.domain.tld.crt {0}client1.domain.tld.crt'.format(D),'aws s3 cp /tmp/vpndetails/client1.domain.tld.key {0}client1.domain.tld.key'.format(D)];C(Q);cfnresponse.send(E,G,cfnresponse.SUCCESS,A,P['CertificateArn'])\n\texcept K as I:B.error(I);R={O:I};cfnresponse.send(E,G,cfnresponse.FAILED,A)\ndef C(commands,workDir=P):\n\tI='PATH';A=os.environ.copy();A[I]='/tmp/bin:'+A[I];A['PYTHONPATH']='/tmp/:';A['EASYRSA_BATCH']='1';C=[]\n\tfor E in commands:G=D.Popen([E],env=A,cwd=P,shell=Q,stdout=D.PIPE,stderr=D.PIPE);F,H=G.communicate();B.info(E);B.info(F);B.info(H);C.append(F)\n\treturn C\ndef F(filename):return open(filename,'rb').read()\ndef main(event,context):\n\tE='RequestType';D=context;A=event;B.info(A);F=['pip3 install awscli --upgrade --no-cache-dir --ignore-installed --target=/tmp/'];C(F)\n\tif A[E]=='Delete':I(A,D)\n\telif A[E]=='Create':J(A,D)\n\telif A[E]=='Update':I(A,D,Q);J(A,D)"
        },
        "Handler": "index.main",
        "Role": {
          "Fn::GetAtt": [
            "ClientVpnVpnCertificateLambdaCustomResourceRole042AF384",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "MemorySize": 1024,
        "Timeout": 300
      },
      "DependsOn": [
        "ClientVpnVpnCertificateLambdaCustomResourceRoleDefaultPolicyBC6B56F1",
        "ClientVpnVpnCertificateLambdaCustomResourceRole042AF384"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/SingletonLambdaCreateVpnCertificateLambda/Resource"
      }
    },
    "ConfigPacksConfigBucket2FDEAE68": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/ConfigBucket/Resource"
      }
    },
    "ConfigPacksConfigBucketPolicy19F5D317": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ConfigPacksConfigBucket2FDEAE68"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetBucketAcl",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms"
                    ]
                  ]
                }
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "ConfigPacksConfigBucket2FDEAE68"
                    }
                  ]
                ]
              },
              "Sid": "AWSConfigConformsBucketPermissionsCheck"
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms"
                    ]
                  ]
                }
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "ConfigPacksConfigBucket2FDEAE68"
                    },
                    "/*"
                  ]
                ]
              },
              "Sid": "AWSConfigConformsBucketDelivery"
            },
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms"
                    ]
                  ]
                }
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "ConfigPacksConfigBucket2FDEAE68"
                    },
                    "/*"
                  ]
                ]
              },
              "Sid": " AWSConfigConformsBucketReadAccess"
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/ConfigBucket/Policy/Resource"
      }
    },
    "ConfigPacksConfigDeliveryChannel58AE9291": {
      "Type": "AWS::Config::DeliveryChannel",
      "Properties": {
        "S3BucketName": {
          "Ref": "ConfigPacksConfigBucket2FDEAE68"
        },
        "Name": "BlueprintConfigDeliveryChannel"
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/ConfigDeliveryChannel"
      }
    },
    "ConfigPacksConfigRecorderRole443C2431": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "config.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSConfigRole"
              ]
            ]
          }
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:PutObject",
                  "Condition": {
                    "StringLike": {
                      "s3:x-amz-acl": "bucket-owner-full-control"
                    }
                  },
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "ConfigPacksConfigBucket2FDEAE68"
                        },
                        "/*"
                      ]
                    ]
                  }
                },
                {
                  "Action": "s3:GetBucketAcl",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "ConfigPacksConfigBucket2FDEAE68"
                        }
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "configRecorderS3Access"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/ConfigRecorderRole/Resource"
      }
    },
    "ConfigPacksConfigRecorder41CB4109": {
      "Type": "AWS::Config::ConfigurationRecorder",
      "Properties": {
        "RoleARN": {
          "Fn::GetAtt": [
            "ConfigPacksConfigRecorderRole443C2431",
            "Arn"
          ]
        },
        "Name": "BlueprintConfigRecorder"
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/ConfigRecorder"
      }
    },
    "ConfigPacksControlTowerDetectiveGuardRailsConformancePack7CE4F243": {
      "Type": "AWS::Config::ConformancePack",
      "Properties": {
        "ConformancePackName": "AWS-Control-Tower-Detective-Guardrails-Conformance-Pack",
        "DeliveryS3Bucket": {
          "Ref": "ConfigPacksConfigBucket2FDEAE68"
        },
        "ConformancePackInputParameters": [],
        "DeliveryS3KeyPrefix": "ct-detective-guardrails",
        "TemplateBody": "###################################################################################\n#\n#   Conformance Pack:\n#     AWS Control Tower Detective Guardrails Conformance Pack\n#\n#    The AWS Control Tower detective guardrails conformance pack contains all of the \n#    AWS Config Rules based guardrails from AWS Control Tower. Use this conformance \n#    pack to apply AWS Control Tower detective guardrails to your existing accounts \n#    prior to enrolling them in AWS Control Tower or to manage resources in your \n#    accounts in regions not currently supported by AWS Control Tower.\n###################################################################################\n\nResources:\n    CheckForEbsOptimizedInstance:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForEbsOptimizedInstance\n        Description: Disallow launch of EC2 instance types that are not EBS-optimized - Checks whether EBS optimization is enabled for your EC2 instances that can be EBS-optimized\n        Source:\n          Owner: AWS\n          SourceIdentifier: EBS_OPTIMIZED_INSTANCE\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::EC2::Instance\n    CheckForEc2VolumesInUse:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForEc2VolumesInUs\n        Description: Disallow EBS volumes that are unattached to an EC2 instance - Checks whether EBS volumes are attached to EC2 instances\n        InputParameters:\n          deleteOnTermination: true\n        Source:\n          Owner: AWS\n          SourceIdentifier: EC2_VOLUME_INUSE_CHECK\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::EC2::Volume\n    CheckForEncryptedVolumes:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForEncryptedVolumes\n        Description: Enable encryption for EBS volumes attached to EC2 instances - Checks whether EBS volumes that are in an attached state are encrypted.\n        Source:\n          Owner: AWS\n          SourceIdentifier: ENCRYPTED_VOLUMES\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::EC2::Volume\n    CheckForIAMUserMFA:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForIAMUserMFA\n        Description: Disallow access to IAM users without MFA - Checks whether the AWS Identity and Access Management users have multi-factor authentication (MFA) enabled. The rule is COMPLIANT if MFA is enabled.\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_USER_MFA_ENABLED\n        MaximumExecutionFrequency: One_Hour\n    CheckForIAMUserConsoleMFA:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForIAMUserConsoleMFA\n        Description: Disallow console access to IAM users without MFA - Checks whether AWS Multi-Factor Authentication (MFA) is enabled for all AWS Identity and Access Management (IAM) users that use a console password. The rule is COMPLIANT if MFA is enabled.\n        Source:\n          Owner: AWS\n          SourceIdentifier: MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS\n        MaximumExecutionFrequency: One_Hour\n    CheckForRdsPublicAccess:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForRdsPublicAccess\n        Description: Disallow public access to RDS database instances - Checks whether the Amazon Relational Database Service (RDS) instances are not publicly accessible. The rule is non-compliant if the publiclyAccessible field is true in the instance configuration item.\n        Source:\n          Owner: AWS\n          SourceIdentifier: RDS_INSTANCE_PUBLIC_ACCESS_CHECK\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::RDS::DBInstance\n    CheckForPublicRdsSnapshots:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForPublicRdsSnapshots\n        Description: Disallow public access to RDS database snapshots - Checks if Amazon Relational Database Service (Amazon RDS) snapshots are public. The rule is non-compliant if any existing and new Amazon RDS snapshots are public.\n        Source:\n          Owner: AWS\n          SourceIdentifier: RDS_SNAPSHOTS_PUBLIC_PROHIBITED\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::RDS::DBSnapshot\n    CheckForRdsStorageEncryption:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForRdsStorageEncryption\n        Description: Disallow RDS database instances that are not storage encrypted - Checks whether storage encryption is enabled for your RDS DB instances.\n        Source:\n          Owner: AWS\n          SourceIdentifier: RDS_STORAGE_ENCRYPTED\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::RDS::DBInstance\n    CheckForRestrictedCommonPortsPolicy:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForRestrictedCommonPortsPolicy\n        Description: Disallow internet connection through RDP - Checks whether security groups that are in use disallow unrestricted incoming TCP traffic to the specified ports.\n        InputParameters:\n          blockedPort1: 20\n          blockedPort2: 21\n          blockedPort3: 3389\n          blockedPort4: 3306\n          blockedPort5: 4333\n        Scope:\n          ComplianceResourceTypes:\n          - AWS::EC2::SecurityGroup\n        Source:\n          Owner: AWS\n          SourceIdentifier: RESTRICTED_INCOMING_TRAFFIC\n    CheckForRestrictedSshPolicy:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForRestrictedSshPolicy\n        Description: Disallow internet connection through SSH - Checks whether security groups that are in use disallow unrestricted incoming SSH traffic.\n        Scope:\n          ComplianceResourceTypes:\n          - AWS::EC2::SecurityGroup\n        Source:\n          Owner: AWS\n          SourceIdentifier: INCOMING_SSH_DISABLED\n    CheckForRootMfa:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForRootMfa\n        Description: Enable MFA for the root user - Checks whether the root user of your AWS account requires multi-factor authentication for console sign-in.\n        Source:\n          Owner: AWS\n          SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED\n        MaximumExecutionFrequency: One_Hour\n    CheckForS3PublicRead:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForS3PublicRead\n        Description: Disallow public read access to S3 buckets - Checks that your S3 buckets do not allow public read access. If an S3 bucket policy or bucket ACL allows public read access, the bucket is noncompliant.\n        Source:\n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::S3::Bucket\n    CheckForS3PublicWrite:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForS3PublicWrite\n        Description: Disallow public write access to S3 buckets - Checks that your S3 buckets do not allow public write access. If an S3 bucket policy or bucket ACL allows public write access, the bucket is noncompliant.\n        Source:\n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_PUBLIC_WRITE_PROHIBITED\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::S3::Bucket\n    CheckForS3VersioningEnabled:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForS3VersioningEnabled\n        Description: Disallow S3 buckets that are not versioning enabled - Checks whether versioning is enabled for your S3 buckets.\n        Source:\n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_VERSIONING_ENABLED\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::S3::Bucket  "
      },
      "DependsOn": [
        "ConfigPacksConfigRecorder41CB4109"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/ControlTowerDetectiveGuardRailsConformancePack"
      }
    },
    "ConfigPacksOperationalBestPracticesForIamConformancePackF6F0D5C9": {
      "Type": "AWS::Config::ConformancePack",
      "Properties": {
        "ConformancePackName": "Operational-Best-Practices-For-AWS-Identity-And-Access-Management",
        "DeliveryS3Bucket": {
          "Ref": "ConfigPacksConfigBucket2FDEAE68"
        },
        "ConformancePackInputParameters": [],
        "DeliveryS3KeyPrefix": "iam-bestpractices",
        "TemplateBody": "################################################################################\n#\n#   Conformance Pack:\n#     Operational Best Practices for AWS Identity and Access Management\n#\n#   See Parameters section for names and descriptions of required parameters.\n#\n################################################################################\n\nParameters:\n    AccessKeysRotatedParameterMaxAccessKeyAge:\n      Description: Maximum number of days without rotation. Default 90.\n      Type: String\n      Default: 90\n    IAMUserUnusedCredentialsCheckParameterMaxCredentialUsageAge:\n      Description: Maximum number of days a credential cannot be used. The default value\n        is 90 days.\n      Type: String\n      Default: 90\nResources:\n    AccessKeysRotated:\n      Properties:\n        ConfigRuleName: AccessKeysRotated\n        Description: Checks whether the active access keys are rotated within the number\n          of days specified in maxAccessKeyAge. The rule is non-compliant if the access\n          keys have not been rotated for more than maxAccessKeyAge number of days.\n        InputParameters:\n          maxAccessKeyAge:\n            Ref: AccessKeysRotatedParameterMaxAccessKeyAge\n        Source:\n          Owner: AWS\n          SourceIdentifier: ACCESS_KEYS_ROTATED\n      Type: AWS::Config::ConfigRule\n    IAMGroupHasUsersCheck:\n      Properties:\n        ConfigRuleName: IAMGroupHasUsersCheck\n        Description: Checks whether IAM groups have at least one IAM user.\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_GROUP_HAS_USERS_CHECK\n      Type: AWS::Config::ConfigRule\n    IAMPasswordPolicy:\n      Properties:\n        ConfigRuleName: IAMPasswordPolicy\n        Description: Checks whether the account password policy for IAM users meets\n          the specified requirements.\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_PASSWORD_POLICY\n      Type: AWS::Config::ConfigRule\n    IAMPolicyNoStatementsWithAdminAccess:\n      Properties:\n        ConfigRuleName: IAMPolicyNoStatementsWithAdminAccess\n        Description: 'Checks whether the default version of AWS Identity and Access\n          Management (IAM) policies do not have administrator access. If any statement\n          has \"Effect\": \"Allow\" with \"Action\": \"*\" over \"Resource\": \"*\", the rule is\n          non-compliant.'\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS\n      Type: AWS::Config::ConfigRule\n    IAMRootAccessKeyCheck:\n      Properties:\n        ConfigRuleName: IAMRootAccessKeyCheck\n        Description: Checks whether the root user access key is available. The rule\n          is compliant if the user access key does not exist.\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_ROOT_ACCESS_KEY_CHECK\n      Type: AWS::Config::ConfigRule\n    IAMUserGroupMembershipCheck:\n      Properties:\n        ConfigRuleName: IAMUserGroupMembershipCheck\n        Description: Checks whether IAM users are members of at least one IAM group.\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_USER_GROUP_MEMBERSHIP_CHECK\n      Type: AWS::Config::ConfigRule\n    IAMUserMFAEnabled:\n      Properties:\n        ConfigRuleName: IAMUserMFAEnabled\n        Description: Checks whether the AWS Identity and Access Management users have\n          multi-factor authentication (MFA) enabled.\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_USER_MFA_ENABLED\n      Type: AWS::Config::ConfigRule\n    IAMUserNoPoliciesCheck:\n      Properties:\n        ConfigRuleName: IAMUserNoPoliciesCheck\n        Description: Checks that none of your IAM users have policies attached. IAM\n          users must inherit permissions from IAM groups or roles.\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_USER_NO_POLICIES_CHECK\n      Type: AWS::Config::ConfigRule\n    IAMUserUnusedCredentialsCheck:\n      Properties:\n        ConfigRuleName: IAMUserUnusedCredentialsCheck\n        Description: Checks whether your AWS Identity and Access Management (IAM) users\n          have passwords or active access keys that have not been used within the specified\n          number of days you provided.\n        InputParameters:\n          maxCredentialUsageAge:\n            Ref: IAMUserUnusedCredentialsCheckParameterMaxCredentialUsageAge\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_USER_UNUSED_CREDENTIALS_CHECK\n      Type: AWS::Config::ConfigRule\n    MFAEnabledForIAMConsoleAccess:\n      Properties:\n        ConfigRuleName: MFAEnabledForIAMConsoleAccess\n        Description: Checks whether AWS Multi-Factor Authentication (MFA) is enabled\n          for all AWS Identity and Access Management (IAM) users that use a console\n          password. The rule is compliant if MFA is enabled.\n        Source:\n          Owner: AWS\n          SourceIdentifier: MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS\n      Type: AWS::Config::ConfigRule\n    RootAccountHardwareMFAEnabled:\n      Properties:\n        ConfigRuleName: RootAccountHardwareMFAEnabled\n        Description: Checks whether your AWS account is enabled to use multi-factor\n          authentication (MFA) hardware device to sign in with root credentials.\n        Source:\n          Owner: AWS\n          SourceIdentifier: ROOT_ACCOUNT_HARDWARE_MFA_ENABLED\n      Type: AWS::Config::ConfigRule\n    RootAccountMFAEnabled:\n      Properties:\n        ConfigRuleName: RootAccountMFAEnabled\n        Description: Checks whether the root user of your AWS account requires multi-factor\n          authentication for console sign-in.\n        Source:\n          Owner: AWS\n          SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED\n      Type: AWS::Config::ConfigRule"
      },
      "DependsOn": [
        "ConfigPacksConfigRecorder41CB4109"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/OperationalBestPracticesForIamConformancePack"
      }
    },
    "ConfigPacksOperationalBestPracticesForS3ConformancePack7F38C015": {
      "Type": "AWS::Config::ConformancePack",
      "Properties": {
        "ConformancePackName": "Operational-Best-Practices-For-Amazon-S3",
        "DeliveryS3Bucket": {
          "Ref": "ConfigPacksConfigBucket2FDEAE68"
        },
        "ConformancePackInputParameters": [],
        "DeliveryS3KeyPrefix": "s3-bestpractices",
        "TemplateBody": "###############################################################################################\n#\n#   Conformance Pack:\n#     Operational Best Practices for Amazon S3\n#\n#    This pack contains AWS Config rules based on the best practice guidelines for Amazon S3.\n#\n###############################################################################################\n\nResources:\n    S3BucketPublicReadProhibited:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: S3BucketPublicReadProhibited\n        Description: >- \n          Checks that your Amazon S3 buckets do not allow public read access.\n          The rule checks the Block Public Access settings, the bucket policy, and the\n          bucket access control list (ACL).\n        Scope:\n          ComplianceResourceTypes:\n          - \"AWS::S3::Bucket\"\n        Source:\n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED\n        MaximumExecutionFrequency: Six_Hours\n    S3BucketPublicWriteProhibited: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: S3BucketPublicWriteProhibited\n        Description: \"Checks that your Amazon S3 buckets do not allow public write access. The rule checks the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_PUBLIC_WRITE_PROHIBITED\n        MaximumExecutionFrequency: Six_Hours\n    S3BucketReplicationEnabled: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: S3BucketReplicationEnabled\n        Description: \"Checks whether the Amazon S3 buckets have cross-region replication enabled.\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_REPLICATION_ENABLED\n    S3BucketSSLRequestsOnly: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: S3BucketSSLRequestsOnly\n        Description: \"Checks whether S3 buckets have policies that require requests to use Secure Socket Layer (SSL).\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_SSL_REQUESTS_ONLY\n    ServerSideReplicationEnabled: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: ServerSideReplicationEnabled\n        Description: \"Checks that your Amazon S3 bucket either has S3 default encryption enabled or that the S3 bucket policy explicitly denies put-object requests without server side encryption.\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED\n    S3BucketLoggingEnabled: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: S3BucketLoggingEnabled\n        Description: \"Checks whether logging is enabled for your S3 buckets.\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_LOGGING_ENABLED"
      },
      "DependsOn": [
        "ConfigPacksConfigRecorder41CB4109"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/OperationalBestPracticesForS3ConformancePack"
      }
    },
    "ConfigPacksOperationalBestPracticesForNistCsfConformancePackFB810725": {
      "Type": "AWS::Config::ConformancePack",
      "Properties": {
        "ConformancePackName": "Operational-Best-Practices-for-NIST-CSF",
        "DeliveryS3Bucket": {
          "Ref": "ConfigPacksConfigBucket2FDEAE68"
        },
        "ConformancePackInputParameters": [],
        "DeliveryS3KeyPrefix": "nist-csf-bestpractices",
        "TemplateBody": "###############################################################################################\n#\n#   Conformance Pack:\n#     Operational Best Practices for Amazon S3\n#\n#    This pack contains AWS Config rules based on the best practice guidelines for Amazon S3.\n#\n###############################################################################################\n\nResources:\n    S3BucketPublicReadProhibited:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: S3BucketPublicReadProhibited\n        Description: >- \n          Checks that your Amazon S3 buckets do not allow public read access.\n          The rule checks the Block Public Access settings, the bucket policy, and the\n          bucket access control list (ACL).\n        Scope:\n          ComplianceResourceTypes:\n          - \"AWS::S3::Bucket\"\n        Source:\n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED\n        MaximumExecutionFrequency: Six_Hours\n    S3BucketPublicWriteProhibited: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: S3BucketPublicWriteProhibited\n        Description: \"Checks that your Amazon S3 buckets do not allow public write access. The rule checks the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_PUBLIC_WRITE_PROHIBITED\n        MaximumExecutionFrequency: Six_Hours\n    S3BucketReplicationEnabled: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: S3BucketReplicationEnabled\n        Description: \"Checks whether the Amazon S3 buckets have cross-region replication enabled.\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_REPLICATION_ENABLED\n    S3BucketSSLRequestsOnly: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: S3BucketSSLRequestsOnly\n        Description: \"Checks whether S3 buckets have policies that require requests to use Secure Socket Layer (SSL).\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_SSL_REQUESTS_ONLY\n    ServerSideReplicationEnabled: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: ServerSideReplicationEnabled\n        Description: \"Checks that your Amazon S3 bucket either has S3 default encryption enabled or that the S3 bucket policy explicitly denies put-object requests without server side encryption.\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED\n    S3BucketLoggingEnabled: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: S3BucketLoggingEnabled\n        Description: \"Checks whether logging is enabled for your S3 buckets.\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_LOGGING_ENABLED"
      },
      "DependsOn": [
        "ConfigPacksConfigRecorder41CB4109"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/OperationalBestPracticesForNistCsfConformancePack"
      }
    },
    "DnsHostedZone9A2A44DA": {
      "Type": "AWS::Route53::HostedZone",
      "Properties": {
        "Name": "corp.",
        "VPCs": [
          {
            "VPCId": {
              "Ref": "VpcCoreManagment030DB556"
            },
            "VPCRegion": {
              "Ref": "AWS::Region"
            }
          },
          {
            "VPCId": {
              "Ref": "VpcCoreProductionD971AE3A"
            },
            "VPCRegion": {
              "Ref": "AWS::Region"
            }
          },
          {
            "VPCId": {
              "Ref": "VpcCoreDevelopment37E2B994"
            },
            "VPCRegion": {
              "Ref": "AWS::Region"
            }
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/Dns/HostedZone/Resource"
      }
    }
  }
}