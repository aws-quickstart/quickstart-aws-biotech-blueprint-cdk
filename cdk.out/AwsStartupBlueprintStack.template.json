{
  "Description": "The AWS Startup Blueprint is a strongly opinionated architecture for any Startup looking to start using AWS follwing best practices on day 1. (ib-7061756C75)",
  "Resources": {
    "VpcCoreProductionD971AE3A": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.50.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/Resource"
      }
    },
    "VpcCoreProductionDMZSubnet1Subnet8CB63360": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.50.0.0/23",
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "DMZ"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1/Subnet"
      }
    },
    "VpcCoreProductionDMZSubnet1RouteTable93117E8B": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1/RouteTable"
      }
    },
    "VpcCoreProductionDMZSubnet1RouteTableAssociation4C99EF6F": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDMZSubnet1RouteTable93117E8B"
        },
        "SubnetId": {
          "Ref": "VpcCoreProductionDMZSubnet1Subnet8CB63360"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreProductionDMZSubnet1DefaultRoute078E8974": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDMZSubnet1RouteTable93117E8B"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcCoreProductionIGW5A93E1A8"
        }
      },
      "DependsOn": [
        "VpcCoreProductionVPCGW30B6BDB2"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1/DefaultRoute"
      }
    },
    "VpcCoreProductionDMZSubnet1EIP624812A4": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1/EIP"
      }
    },
    "VpcCoreProductionDMZSubnet1NATGatewayC224625E": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcCoreProductionDMZSubnet1EIP624812A4",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "VpcCoreProductionDMZSubnet1Subnet8CB63360"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet1/NATGateway"
      }
    },
    "VpcCoreProductionDMZSubnet2Subnet544A7F20": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.50.2.0/23",
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "DMZ"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet2/Subnet"
      }
    },
    "VpcCoreProductionDMZSubnet2RouteTable280A8E86": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet2/RouteTable"
      }
    },
    "VpcCoreProductionDMZSubnet2RouteTableAssociation1698D572": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDMZSubnet2RouteTable280A8E86"
        },
        "SubnetId": {
          "Ref": "VpcCoreProductionDMZSubnet2Subnet544A7F20"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreProductionDMZSubnet2DefaultRoute3F9FD113": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDMZSubnet2RouteTable280A8E86"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcCoreProductionIGW5A93E1A8"
        }
      },
      "DependsOn": [
        "VpcCoreProductionVPCGW30B6BDB2"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DMZSubnet2/DefaultRoute"
      }
    },
    "VpcCoreProductionApplicationSubnet1SubnetE209B72D": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.50.4.0/23",
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Application"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet1/Subnet"
      }
    },
    "VpcCoreProductionApplicationSubnet1RouteTableC5D4BB39": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet1/RouteTable"
      }
    },
    "VpcCoreProductionApplicationSubnet1RouteTableAssociation7EDAC97B": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionApplicationSubnet1RouteTableC5D4BB39"
        },
        "SubnetId": {
          "Ref": "VpcCoreProductionApplicationSubnet1SubnetE209B72D"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreProductionApplicationSubnet1DefaultRouteA2D6D34E": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionApplicationSubnet1RouteTableC5D4BB39"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcCoreProductionDMZSubnet1NATGatewayC224625E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet1/DefaultRoute"
      }
    },
    "VpcCoreProductionApplicationSubnet2SubnetFF60B9F3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.50.6.0/23",
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Application"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet2/Subnet"
      }
    },
    "VpcCoreProductionApplicationSubnet2RouteTable4DF63A0C": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet2/RouteTable"
      }
    },
    "VpcCoreProductionApplicationSubnet2RouteTableAssociation7D462ED9": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionApplicationSubnet2RouteTable4DF63A0C"
        },
        "SubnetId": {
          "Ref": "VpcCoreProductionApplicationSubnet2SubnetFF60B9F3"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreProductionApplicationSubnet2DefaultRoute115CEEEB": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionApplicationSubnet2RouteTable4DF63A0C"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcCoreProductionDMZSubnet1NATGatewayC224625E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/ApplicationSubnet2/DefaultRoute"
      }
    },
    "VpcCoreProductionDatabaseSubnet1Subnet09EF33D9": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.50.8.0/23",
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Database"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet1/Subnet"
      }
    },
    "VpcCoreProductionDatabaseSubnet1RouteTable4189D151": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet1/RouteTable"
      }
    },
    "VpcCoreProductionDatabaseSubnet1RouteTableAssociationD1A8D4E9": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDatabaseSubnet1RouteTable4189D151"
        },
        "SubnetId": {
          "Ref": "VpcCoreProductionDatabaseSubnet1Subnet09EF33D9"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreProductionDatabaseSubnet2Subnet128DE8A2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.50.10.0/23",
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Database"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet2/Subnet"
      }
    },
    "VpcCoreProductionDatabaseSubnet2RouteTable72412D1A": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet2/RouteTable"
      }
    },
    "VpcCoreProductionDatabaseSubnet2RouteTableAssociation63113979": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDatabaseSubnet2RouteTable72412D1A"
        },
        "SubnetId": {
          "Ref": "VpcCoreProductionDatabaseSubnet2Subnet128DE8A2"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/DatabaseSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreProductionIGW5A93E1A8": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Production"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/IGW"
      }
    },
    "VpcCoreProductionVPCGW30B6BDB2": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "InternetGatewayId": {
          "Ref": "VpcCoreProductionIGW5A93E1A8"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/VPCGW"
      }
    },
    "VpcCoreProductionS39B8E42EB": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".s3"
            ]
          ]
        },
        "VpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "RouteTableIds": [
          {
            "Ref": "VpcCoreProductionApplicationSubnet1RouteTableC5D4BB39"
          },
          {
            "Ref": "VpcCoreProductionApplicationSubnet2RouteTable4DF63A0C"
          },
          {
            "Ref": "VpcCoreProductionDMZSubnet1RouteTable93117E8B"
          },
          {
            "Ref": "VpcCoreProductionDMZSubnet2RouteTable280A8E86"
          },
          {
            "Ref": "VpcCoreProductionDatabaseSubnet1RouteTable4189D151"
          },
          {
            "Ref": "VpcCoreProductionDatabaseSubnet2RouteTable72412D1A"
          }
        ],
        "VpcEndpointType": "Gateway"
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Production/S3/Resource"
      }
    },
    "VpcCoreDevelopment37E2B994": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.60.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/Resource"
      }
    },
    "VpcCoreDevelopmentDMZSubnet1SubnetD48B44F5": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.60.0.0/23",
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "DMZ"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1/Subnet"
      }
    },
    "VpcCoreDevelopmentDMZSubnet1RouteTable8E3AF8CC": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1/RouteTable"
      }
    },
    "VpcCoreDevelopmentDMZSubnet1RouteTableAssociationB1D7A6B7": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet1RouteTable8E3AF8CC"
        },
        "SubnetId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet1SubnetD48B44F5"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreDevelopmentDMZSubnet1DefaultRouteC1A58F2B": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet1RouteTable8E3AF8CC"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcCoreDevelopmentIGWAD83048D"
        }
      },
      "DependsOn": [
        "VpcCoreDevelopmentVPCGW9558AC45"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1/DefaultRoute"
      }
    },
    "VpcCoreDevelopmentDMZSubnet1EIP58CD3212": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1/EIP"
      }
    },
    "VpcCoreDevelopmentDMZSubnet1NATGatewayD5175E96": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcCoreDevelopmentDMZSubnet1EIP58CD3212",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet1SubnetD48B44F5"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet1/NATGateway"
      }
    },
    "VpcCoreDevelopmentDMZSubnet2SubnetD5020296": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.60.2.0/23",
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "DMZ"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet2/Subnet"
      }
    },
    "VpcCoreDevelopmentDMZSubnet2RouteTable1EB1E7D2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet2/RouteTable"
      }
    },
    "VpcCoreDevelopmentDMZSubnet2RouteTableAssociationAD80DA52": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet2RouteTable1EB1E7D2"
        },
        "SubnetId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet2SubnetD5020296"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreDevelopmentDMZSubnet2DefaultRoute705CC16F": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet2RouteTable1EB1E7D2"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcCoreDevelopmentIGWAD83048D"
        }
      },
      "DependsOn": [
        "VpcCoreDevelopmentVPCGW9558AC45"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DMZSubnet2/DefaultRoute"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet1Subnet5A750B62": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.60.4.0/23",
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Application"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet1/Subnet"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet1RouteTableD5BB8081": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet1/RouteTable"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet1RouteTableAssociationFD1A2A22": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet1RouteTableD5BB8081"
        },
        "SubnetId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet1Subnet5A750B62"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet1DefaultRoute1731A859": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet1RouteTableD5BB8081"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet1NATGatewayD5175E96"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet1/DefaultRoute"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet2Subnet3230F190": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.60.6.0/23",
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Application"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet2/Subnet"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet2RouteTableFDC2C351": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet2/RouteTable"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet2RouteTableAssociation7C43FB1B": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet2RouteTableFDC2C351"
        },
        "SubnetId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet2Subnet3230F190"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreDevelopmentApplicationSubnet2DefaultRouteA9C5EE12": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet2RouteTableFDC2C351"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet1NATGatewayD5175E96"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/ApplicationSubnet2/DefaultRoute"
      }
    },
    "VpcCoreDevelopmentDatabaseSubnet1Subnet08D67DFC": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.60.8.0/23",
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Database"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet1/Subnet"
      }
    },
    "VpcCoreDevelopmentDatabaseSubnet1RouteTableB0F16F62": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet1/RouteTable"
      }
    },
    "VpcCoreDevelopmentDatabaseSubnet1RouteTableAssociation386F1245": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDatabaseSubnet1RouteTableB0F16F62"
        },
        "SubnetId": {
          "Ref": "VpcCoreDevelopmentDatabaseSubnet1Subnet08D67DFC"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreDevelopmentDatabaseSubnet2Subnet05D038F0": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.60.10.0/23",
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Database"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet2/Subnet"
      }
    },
    "VpcCoreDevelopmentDatabaseSubnet2RouteTable07847265": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet2/RouteTable"
      }
    },
    "VpcCoreDevelopmentDatabaseSubnet2RouteTableAssociation43E36BB0": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDatabaseSubnet2RouteTable07847265"
        },
        "SubnetId": {
          "Ref": "VpcCoreDevelopmentDatabaseSubnet2Subnet05D038F0"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/DatabaseSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreDevelopmentIGWAD83048D": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Development"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/IGW"
      }
    },
    "VpcCoreDevelopmentVPCGW9558AC45": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "InternetGatewayId": {
          "Ref": "VpcCoreDevelopmentIGWAD83048D"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/VPCGW"
      }
    },
    "VpcCoreDevelopmentS37F7BBD0F": {
      "Type": "AWS::EC2::VPCEndpoint",
      "Properties": {
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region"
              },
              ".s3"
            ]
          ]
        },
        "VpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "RouteTableIds": [
          {
            "Ref": "VpcCoreDevelopmentApplicationSubnet1RouteTableD5BB8081"
          },
          {
            "Ref": "VpcCoreDevelopmentApplicationSubnet2RouteTableFDC2C351"
          },
          {
            "Ref": "VpcCoreDevelopmentDMZSubnet1RouteTable8E3AF8CC"
          },
          {
            "Ref": "VpcCoreDevelopmentDMZSubnet2RouteTable1EB1E7D2"
          },
          {
            "Ref": "VpcCoreDevelopmentDatabaseSubnet1RouteTableB0F16F62"
          },
          {
            "Ref": "VpcCoreDevelopmentDatabaseSubnet2RouteTable07847265"
          }
        ],
        "VpcEndpointType": "Gateway"
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Development/S3/Resource"
      }
    },
    "VpcCoreManagment030DB556": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.70.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/Resource"
      }
    },
    "VpcCoreManagmentDMZSubnet1Subnet3D4DB21E": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.70.0.0/23",
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "DMZ"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1/Subnet"
      }
    },
    "VpcCoreManagmentDMZSubnet1RouteTableA3569583": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1/RouteTable"
      }
    },
    "VpcCoreManagmentDMZSubnet1RouteTableAssociationCB71CE11": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet1RouteTableA3569583"
        },
        "SubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet1Subnet3D4DB21E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreManagmentDMZSubnet1DefaultRouteB7ED8FC9": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet1RouteTableA3569583"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcCoreManagmentIGWE905604F"
        }
      },
      "DependsOn": [
        "VpcCoreManagmentVPCGW52A2E34D"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1/DefaultRoute"
      }
    },
    "VpcCoreManagmentDMZSubnet1EIP7EFCA2AF": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1/EIP"
      }
    },
    "VpcCoreManagmentDMZSubnet1NATGatewayC5BFB186": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcCoreManagmentDMZSubnet1EIP7EFCA2AF",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet1Subnet3D4DB21E"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet1/NATGateway"
      }
    },
    "VpcCoreManagmentDMZSubnet2SubnetB133424E": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.70.2.0/23",
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "DMZ"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet2/Subnet"
      }
    },
    "VpcCoreManagmentDMZSubnet2RouteTable6C5999E3": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet2/RouteTable"
      }
    },
    "VpcCoreManagmentDMZSubnet2RouteTableAssociation642ADD19": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet2RouteTable6C5999E3"
        },
        "SubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet2SubnetB133424E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreManagmentDMZSubnet2DefaultRoute05771B64": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet2RouteTable6C5999E3"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcCoreManagmentIGWE905604F"
        }
      },
      "DependsOn": [
        "VpcCoreManagmentVPCGW52A2E34D"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/DMZSubnet2/DefaultRoute"
      }
    },
    "VpcCoreManagmentApplicationSubnet1Subnet1DE5C8C4": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.70.4.0/23",
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Application"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet1/Subnet"
      }
    },
    "VpcCoreManagmentApplicationSubnet1RouteTable12C52E22": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet1"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet1/RouteTable"
      }
    },
    "VpcCoreManagmentApplicationSubnet1RouteTableAssociation06F8E2E2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet1RouteTable12C52E22"
        },
        "SubnetId": {
          "Ref": "VpcCoreManagmentApplicationSubnet1Subnet1DE5C8C4"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet1/RouteTableAssociation"
      }
    },
    "VpcCoreManagmentApplicationSubnet1DefaultRoute2CE87E61": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet1RouteTable12C52E22"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcCoreManagmentDMZSubnet1NATGatewayC5BFB186"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet1/DefaultRoute"
      }
    },
    "VpcCoreManagmentApplicationSubnet2SubnetF1B8CE48": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.70.6.0/23",
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Application"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet2/Subnet"
      }
    },
    "VpcCoreManagmentApplicationSubnet2RouteTableFD53ABE8": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet2"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet2/RouteTable"
      }
    },
    "VpcCoreManagmentApplicationSubnet2RouteTableAssociationD38A75C2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet2RouteTableFD53ABE8"
        },
        "SubnetId": {
          "Ref": "VpcCoreManagmentApplicationSubnet2SubnetF1B8CE48"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet2/RouteTableAssociation"
      }
    },
    "VpcCoreManagmentApplicationSubnet2DefaultRoute05B09043": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet2RouteTableFD53ABE8"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcCoreManagmentDMZSubnet1NATGatewayC5BFB186"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/ApplicationSubnet2/DefaultRoute"
      }
    },
    "VpcCoreManagmentIGWE905604F": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "AwsStartupBlueprintStack/VpcCore/Managment"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/IGW"
      }
    },
    "VpcCoreManagmentVPCGW52A2E34D": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        },
        "InternetGatewayId": {
          "Ref": "VpcCoreManagmentIGWE905604F"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/Managment/VPCGW"
      }
    },
    "VpcCoreManagmentToProductionPeering22C33F18": {
      "Type": "AWS::EC2::VPCPeeringConnection",
      "Properties": {
        "PeerVpcId": {
          "Ref": "VpcCoreProductionD971AE3A"
        },
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/ManagmentToProductionPeering"
      }
    },
    "VpcCoreManagmentToDevelopmentPeering3A7C248E": {
      "Type": "AWS::EC2::VPCPeeringConnection",
      "Properties": {
        "PeerVpcId": {
          "Ref": "VpcCoreDevelopment37E2B994"
        },
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/ManagmentToDevelopmentPeering"
      }
    },
    "VpcCoremgmtPublicToDev00CE2841B": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet1RouteTableA3569583"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreDevelopment37E2B994",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPublicToDev-0"
      }
    },
    "VpcCoremgmtPublicToDev11C8BD95A": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet2RouteTable6C5999E3"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreDevelopment37E2B994",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPublicToDev-1"
      }
    },
    "VpcCoremgmtPrivateToDev0786AB1D9": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet1RouteTable12C52E22"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreDevelopment37E2B994",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPrivateToDev-0"
      }
    },
    "VpcCoremgmtPrivateToDev19BBE4CA7": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet2RouteTableFD53ABE8"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreDevelopment37E2B994",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPrivateToDev-1"
      }
    },
    "VpcCoredevPublicToMgmt0A0CBE086": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet1RouteTable8E3AF8CC"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/devPublicToMgmt-0"
      }
    },
    "VpcCoredevPublicToMgmt17BB06B4B": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDMZSubnet2RouteTable1EB1E7D2"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/devPublicToMgmt-1"
      }
    },
    "VpcCoredevPrivateToMgmt015322763": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet1RouteTableD5BB8081"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/devPrivateToMgmt-0"
      }
    },
    "VpcCoredevPrivateToMgmt18C0769D9": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentApplicationSubnet2RouteTableFDC2C351"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/devPrivateToMgmt-1"
      }
    },
    "VpcCoredevIsolatedToMgmt06FAE198F": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDatabaseSubnet1RouteTableB0F16F62"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/devIsolatedToMgmt-0"
      }
    },
    "VpcCoredevIsolatedToMgmt1D9C968A0": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreDevelopmentDatabaseSubnet2RouteTable07847265"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToDevelopmentPeering3A7C248E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/devIsolatedToMgmt-1"
      }
    },
    "VpcCoremgmtPublicToProd09E91CB4A": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet1RouteTableA3569583"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreProductionD971AE3A",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPublicToProd-0"
      }
    },
    "VpcCoremgmtPublicToProd13B87535A": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentDMZSubnet2RouteTable6C5999E3"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreProductionD971AE3A",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPublicToProd-1"
      }
    },
    "VpcCoremgmtPrivateToProd02E427081": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet1RouteTable12C52E22"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreProductionD971AE3A",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPrivateToProd-0"
      }
    },
    "VpcCoremgmtPrivateToProd190B37EA5": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreManagmentApplicationSubnet2RouteTableFD53ABE8"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreProductionD971AE3A",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/mgmtPrivateToProd-1"
      }
    },
    "VpcCoreprodPublicToMgmt0A4005CA8": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDMZSubnet1RouteTable93117E8B"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/prodPublicToMgmt-0"
      }
    },
    "VpcCoreprodPublicToMgmt1EC8240AC": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionDMZSubnet2RouteTable280A8E86"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/prodPublicToMgmt-1"
      }
    },
    "VpcCoreprodPrivateToMgmt0A8B14018": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionApplicationSubnet1RouteTableC5D4BB39"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/prodPrivateToMgmt-0"
      }
    },
    "VpcCoreprodPrivateToMgmt1C6119F45": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcCoreProductionApplicationSubnet2RouteTable4DF63A0C"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "VpcPeeringConnectionId": {
          "Ref": "VpcCoreManagmentToProductionPeering22C33F18"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/VpcCore/prodPrivateToMgmt-1"
      }
    },
    "ClientVpnVpnCertificateLambdaCustomResourceRole042AF384": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/VpnCertificateLambdaCustomResourceRole/Resource"
      }
    },
    "ClientVpnVpnCertificateLambdaCustomResourceRoleDefaultPolicyBC6B56F1": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "acm:ImportCertificate",
                "acm:DeleteCertificate"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ClientVpnVpnConfigBucketF2E04B98",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ClientVpnVpnConfigBucketF2E04B98",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClientVpnVpnCertificateLambdaCustomResourceRoleDefaultPolicyBC6B56F1",
        "Roles": [
          {
            "Ref": "ClientVpnVpnCertificateLambdaCustomResourceRole042AF384"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/VpnCertificateLambdaCustomResourceRole/DefaultPolicy/Resource"
      }
    },
    "ClientVpnVpnConfigBucketF2E04B98": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/VpnConfigBucket/Resource"
      }
    },
    "ClientVpnvpnCertificateProviderframeworkonEventServiceRole60471AD0": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/vpnCertificateProvider/framework-onEvent/ServiceRole/Resource"
      }
    },
    "ClientVpnvpnCertificateProviderframeworkonEventServiceRoleDefaultPolicyE25CE498": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "SingletonLambdaCreateVpnCertificateLambda14FF3DCC",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClientVpnvpnCertificateProviderframeworkonEventServiceRoleDefaultPolicyE25CE498",
        "Roles": [
          {
            "Ref": "ClientVpnvpnCertificateProviderframeworkonEventServiceRole60471AD0"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/vpnCertificateProvider/framework-onEvent/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "ClientVpnvpnCertificateProviderframeworkonEvent3C19EA05": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "AssetParametersc691172cdeefa2c91b5a2907f9d81118e47597634943344795f1a844192dd49cS3BucketEAC9DD43"
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParametersc691172cdeefa2c91b5a2907f9d81118e47597634943344795f1a844192dd49cS3VersionKeyDD9AE9E7"
                        }
                      ]
                    }
                  ]
                },
                {
                  "Fn::Select": [
                    1,
                    {
                      "Fn::Split": [
                        "||",
                        {
                          "Ref": "AssetParametersc691172cdeefa2c91b5a2907f9d81118e47597634943344795f1a844192dd49cS3VersionKeyDD9AE9E7"
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "ClientVpnvpnCertificateProviderframeworkonEventServiceRole60471AD0",
            "Arn"
          ]
        },
        "Description": "AWS CDK resource provider framework - onEvent (AwsStartupBlueprintStack/ClientVpn/vpnCertificateProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "SingletonLambdaCreateVpnCertificateLambda14FF3DCC",
                "Arn"
              ]
            }
          }
        },
        "Handler": "framework.onEvent",
        "Runtime": "nodejs10.x",
        "Timeout": 900
      },
      "DependsOn": [
        "ClientVpnvpnCertificateProviderframeworkonEventServiceRoleDefaultPolicyE25CE498",
        "ClientVpnvpnCertificateProviderframeworkonEventServiceRole60471AD0"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/vpnCertificateProvider/framework-onEvent/Resource",
        "aws:asset:path": "asset.c691172cdeefa2c91b5a2907f9d81118e47597634943344795f1a844192dd49c",
        "aws:asset:property": "Code"
      }
    },
    "ClientVpnvpnCertificate550A99D6": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ClientVpnvpnCertificateProviderframeworkonEvent3C19EA05",
            "Arn"
          ]
        },
        "VpnConfigBucket": {
          "Fn::Join": [
            "",
            [
              "s3://",
              {
                "Ref": "ClientVpnVpnConfigBucketF2E04B98"
              },
              "/"
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/vpnCertificate/Default"
      }
    },
    "ClientVpnClientVpnAccessLogGroup8491CD05": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 180
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/ClientVpnAccessLogGroup/Resource"
      }
    },
    "ClientVpnClientVpnAccessLogStream5480C352": {
      "Type": "AWS::Logs::LogStream",
      "Properties": {
        "LogGroupName": {
          "Ref": "ClientVpnClientVpnAccessLogGroup8491CD05"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/ClientVpnAccessLogStream/Resource"
      }
    },
    "ClientVpnVpnUsersSG5BB5DCBE": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group associated with VPN users accessing the network through the Client VPN Endpoint in the managment VPC.",
        "GroupName": "VpnUsersSG",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/VpnUsersSG/Resource"
      }
    },
    "ClientVpnclientVpnEndpoint53D29AAC": {
      "Type": "AWS::EC2::ClientVpnEndpoint",
      "Properties": {
        "AuthenticationOptions": [
          {
            "MutualAuthentication": {
              "ClientRootCertificateChainArn": {
                "Ref": "ClientVpnvpnCertificate550A99D6"
              }
            },
            "Type": "certificate-authentication"
          }
        ],
        "ClientCidrBlock": "10.71.0.0/16",
        "ConnectionLogOptions": {
          "CloudwatchLogGroup": {
            "Ref": "ClientVpnClientVpnAccessLogGroup8491CD05"
          },
          "CloudwatchLogStream": {
            "Ref": "ClientVpnClientVpnAccessLogStream5480C352"
          },
          "Enabled": true
        },
        "ServerCertificateArn": {
          "Ref": "ClientVpnvpnCertificate550A99D6"
        },
        "Description": "Internal VPN Endpoint",
        "DnsServers": [
          "10.70.0.2"
        ],
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "ClientVpnVpnUsersSG5BB5DCBE",
              "GroupId"
            ]
          }
        ],
        "SplitTunnel": true,
        "VpcId": {
          "Ref": "VpcCoreManagment030DB556"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/clientVpnEndpoint"
      }
    },
    "ClientVpn0clientVpnEndpointAssociation8160B577": {
      "Type": "AWS::EC2::ClientVpnTargetNetworkAssociation",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "SubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet1Subnet3D4DB21E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/0-clientVpnEndpointAssociation"
      }
    },
    "ClientVpn1clientVpnEndpointAssociation19D93CB9": {
      "Type": "AWS::EC2::ClientVpnTargetNetworkAssociation",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "SubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet2SubnetB133424E"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/1-clientVpnEndpointAssociation"
      }
    },
    "ClientVpnProductionAuthorization8EEF0591": {
      "Type": "AWS::EC2::ClientVpnAuthorizationRule",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "TargetNetworkCidr": {
          "Fn::GetAtt": [
            "VpcCoreProductionD971AE3A",
            "CidrBlock"
          ]
        },
        "AuthorizeAllGroups": true,
        "Description": "Allows VPN users access to Production VPC"
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/ProductionAuthorization"
      }
    },
    "ClientVpnDevelopmentAuthorizationF2F84AF6": {
      "Type": "AWS::EC2::ClientVpnAuthorizationRule",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "TargetNetworkCidr": {
          "Fn::GetAtt": [
            "VpcCoreDevelopment37E2B994",
            "CidrBlock"
          ]
        },
        "AuthorizeAllGroups": true,
        "Description": "Allows VPN users access to Development VPC"
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/DevelopmentAuthorization"
      }
    },
    "ClientVpnManagmentAuthorization5FD7AAA7": {
      "Type": "AWS::EC2::ClientVpnAuthorizationRule",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "TargetNetworkCidr": {
          "Fn::GetAtt": [
            "VpcCoreManagment030DB556",
            "CidrBlock"
          ]
        },
        "AuthorizeAllGroups": true,
        "Description": "Allows Transit VPN users access to Managment VPC"
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/ManagmentAuthorization"
      }
    },
    "ClientVpn0productionRoute7AD177DA": {
      "Type": "AWS::EC2::ClientVpnRoute",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreProductionD971AE3A",
            "CidrBlock"
          ]
        },
        "TargetVpcSubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet1Subnet3D4DB21E"
        }
      },
      "DependsOn": [
        "ClientVpn0clientVpnEndpointAssociation8160B577",
        "ClientVpn1clientVpnEndpointAssociation19D93CB9"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/0-productionRoute"
      }
    },
    "ClientVpn0developmentRouteDE605129": {
      "Type": "AWS::EC2::ClientVpnRoute",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreDevelopment37E2B994",
            "CidrBlock"
          ]
        },
        "TargetVpcSubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet1Subnet3D4DB21E"
        }
      },
      "DependsOn": [
        "ClientVpn0clientVpnEndpointAssociation8160B577",
        "ClientVpn1clientVpnEndpointAssociation19D93CB9"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/0-developmentRoute"
      }
    },
    "ClientVpn1productionRouteE229C4FD": {
      "Type": "AWS::EC2::ClientVpnRoute",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreProductionD971AE3A",
            "CidrBlock"
          ]
        },
        "TargetVpcSubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet2SubnetB133424E"
        }
      },
      "DependsOn": [
        "ClientVpn0clientVpnEndpointAssociation8160B577",
        "ClientVpn1clientVpnEndpointAssociation19D93CB9"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/1-productionRoute"
      }
    },
    "ClientVpn1developmentRouteBB456F2F": {
      "Type": "AWS::EC2::ClientVpnRoute",
      "Properties": {
        "ClientVpnEndpointId": {
          "Ref": "ClientVpnclientVpnEndpoint53D29AAC"
        },
        "DestinationCidrBlock": {
          "Fn::GetAtt": [
            "VpcCoreDevelopment37E2B994",
            "CidrBlock"
          ]
        },
        "TargetVpcSubnetId": {
          "Ref": "VpcCoreManagmentDMZSubnet2SubnetB133424E"
        }
      },
      "DependsOn": [
        "ClientVpn0clientVpnEndpointAssociation8160B577",
        "ClientVpn1clientVpnEndpointAssociation19D93CB9"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ClientVpn/1-developmentRoute"
      }
    },
    "SingletonLambdaCreateVpnCertificateLambda14FF3DCC": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "S=True\nR='/tmp/'\nQ='ErrorMessage'\nP='responseData'\nO='VpnConfigBucket'\nN='ResourceProperties'\nM=Exception\nL='PhysicalResourceId'\nK=False\nimport subprocess as D,os,sys,boto3 as B,logging as G,json,traceback\nT=B.client('ec2')\nU=B.client('ssm')\nH=B.client('acm')\nA=G.getLogger()\nA.setLevel(G.INFO)\nE={}\ndef I(event,context,isUpdate=K):\n\tD=event\n\ttry:\n\t\tE['Complete']='True';F=D[L];B=D[N][O];I=['aws s3 rm {0}ca.crt'.format(B),'aws s3 rm {0}server.crt'.format(B),'aws s3 rm {0}server.key'.format(B),'aws s3 rm {0}client1.domain.tld.crt'.format(B),'aws s3 rm {0}client1.domain.tld.key'.format(B)];R=C(I);H.delete_certificate(CertificateArn=F)\n\t\tif isUpdate==K:return{L:F,P:E}\n\texcept M as G:A.error(G);J=G.args[0];S={Q:J};return K\ndef J(event,context):\n\ttry:A.info('Starting to create certificate');B=event[N][O];I=['curl -L https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.6/EasyRSA-unix-v3.0.6.tgz -O','mkdir /tmp/easyrsa','mkdir /tmp/vpndetails','tar -xvzf /tmp/EasyRSA-unix-v3.0.6.tgz -C /tmp/easyrsa','ls /tmp/easyrsa'];C(I);J=['/tmp/easyrsa/EasyRSA-v3.0.6/easyrsa init-pki','/tmp/easyrsa/EasyRSA-v3.0.6/easyrsa build-ca nopass','/tmp/easyrsa/EasyRSA-v3.0.6/easyrsa build-server-full server nopass','/tmp/easyrsa/EasyRSA-v3.0.6/easyrsa build-client-full client1.domain.tld nopass','cp /tmp/pki/ca.crt /tmp/vpndetails/ca.crt','cp /tmp/pki/issued/server.crt /tmp/vpndetails/server.crt','cp /tmp/pki/private/server.key /tmp/vpndetails/server.key','cp /tmp/pki/issued/client1.domain.tld.crt /tmp/vpndetails/client1.domain.tld.crt','cp /tmp/pki/private/client1.domain.tld.key /tmp/vpndetails/client1.domain.tld.key'];C(J,'/tmp/easy-rsa/EasyRSA-v3.0.6');D=H.import_certificate(Certificate=F('/tmp/vpndetails/server.crt'),PrivateKey=F('/tmp/vpndetails/server.key'),CertificateChain=F('/tmp/vpndetails/ca.crt'));A.info(D);K=['aws s3 cp /tmp/vpndetails/ca.crt {0}ca.crt'.format(B),'aws s3 cp /tmp/vpndetails/server.crt {0}server.crt'.format(B),'aws s3 cp /tmp/vpndetails/server.key {0}server.key'.format(B),'aws s3 cp /tmp/vpndetails/client1.domain.tld.crt {0}client1.domain.tld.crt'.format(B),'aws s3 cp /tmp/vpndetails/client1.domain.tld.key {0}client1.domain.tld.key'.format(B)];C(K);return{P:E,L:D['CertificateArn']}\n\texcept M as G:A.error(G);R={Q:G};return R\ndef C(commands,workDir=R):\n\tI='PATH';B=os.environ.copy();B[I]='/tmp/bin:'+B[I];B['PYTHONPATH']='/tmp/:';B['EASYRSA_BATCH']='1';C=[]\n\tfor E in commands:G=D.Popen([E],env=B,cwd=R,shell=S,stdout=D.PIPE,stderr=D.PIPE);F,H=G.communicate();A.info(E);A.info(F);A.info(H);C.append(F)\n\treturn C\ndef F(filename):return open(filename,'rb').read()\ndef main(event,context):\n\tE='RequestType';D=context;B=event;A.info(B);F=['pip3 install awscli --upgrade --no-cache-dir --ignore-installed --target=/tmp/'];C(F)\n\tif B[E]=='Delete':return I(B,D)\n\telif B[E]=='Create':return J(B,D)\n\telif B[E]=='Update':I(B,D,S);return J(B,D)"
        },
        "Role": {
          "Fn::GetAtt": [
            "ClientVpnVpnCertificateLambdaCustomResourceRole042AF384",
            "Arn"
          ]
        },
        "Handler": "index.main",
        "MemorySize": 1024,
        "Runtime": "python3.7",
        "Timeout": 300
      },
      "DependsOn": [
        "ClientVpnVpnCertificateLambdaCustomResourceRoleDefaultPolicyBC6B56F1",
        "ClientVpnVpnCertificateLambdaCustomResourceRole042AF384"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/SingletonLambdaCreateVpnCertificateLambda/Resource"
      }
    },
    "ConfigPacksConfigBucket2FDEAE68": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/ConfigBucket/Resource"
      }
    },
    "ConfigPacksConfigBucketPolicy19F5D317": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ConfigPacksConfigBucket2FDEAE68"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:GetBucketAcl",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms"
                    ]
                  ]
                }
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "ConfigPacksConfigBucket2FDEAE68"
                    }
                  ]
                ]
              },
              "Sid": "AWSConfigConformsBucketPermissionsCheck"
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms"
                    ]
                  ]
                }
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "ConfigPacksConfigBucket2FDEAE68"
                    },
                    "/*"
                  ]
                ]
              },
              "Sid": "AWSConfigConformsBucketDelivery"
            },
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms"
                    ]
                  ]
                }
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "ConfigPacksConfigBucket2FDEAE68"
                    },
                    "/*"
                  ]
                ]
              },
              "Sid": " AWSConfigConformsBucketReadAccess"
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/ConfigBucket/Policy/Resource"
      }
    },
    "ConfigPacksConfigDeliveryChannel58AE9291": {
      "Type": "AWS::Config::DeliveryChannel",
      "Properties": {
        "S3BucketName": {
          "Ref": "ConfigPacksConfigBucket2FDEAE68"
        },
        "Name": "BlueprintConfigDeliveryChannel"
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/ConfigDeliveryChannel"
      }
    },
    "ConfigPacksConfigRecorderRole443C2431": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "config.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSConfigRole"
              ]
            ]
          }
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:PutObject",
                  "Condition": {
                    "StringLike": {
                      "s3:x-amz-acl": "bucket-owner-full-control"
                    }
                  },
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "ConfigPacksConfigBucket2FDEAE68"
                        },
                        "/*"
                      ]
                    ]
                  }
                },
                {
                  "Action": "s3:GetBucketAcl",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "ConfigPacksConfigBucket2FDEAE68"
                        }
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "configRecorderS3Access"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/ConfigRecorderRole/Resource"
      }
    },
    "ConfigPacksConfigRecorder41CB4109": {
      "Type": "AWS::Config::ConfigurationRecorder",
      "Properties": {
        "RoleARN": {
          "Fn::GetAtt": [
            "ConfigPacksConfigRecorderRole443C2431",
            "Arn"
          ]
        },
        "Name": "BlueprintConfigRecorder",
        "RecordingGroup": {
          "AllSupported": true,
          "IncludeGlobalResourceTypes": true
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/ConfigRecorder"
      }
    },
    "ConfigPacksControlTowerDetectiveGuardRailsConformancePack7CE4F243": {
      "Type": "AWS::Config::ConformancePack",
      "Properties": {
        "ConformancePackName": "AWS-Control-Tower-Detective-Guardrails-Conformance-Pack",
        "ConformancePackInputParameters": [],
        "DeliveryS3Bucket": {
          "Ref": "ConfigPacksConfigBucket2FDEAE68"
        },
        "DeliveryS3KeyPrefix": "ct-detective-guardrails",
        "TemplateBody": "###################################################################################\n#\n#   Conformance Pack:\n#     AWS Control Tower Detective Guardrails Conformance Pack\n#\n#    The AWS Control Tower detective guardrails conformance pack contains all of the \n#    AWS Config Rules based guardrails from AWS Control Tower. Use this conformance \n#    pack to apply AWS Control Tower detective guardrails to your existing accounts \n#    prior to enrolling them in AWS Control Tower or to manage resources in your \n#    accounts in regions not currently supported by AWS Control Tower.\n###################################################################################\n\nResources:\n    CheckForEbsOptimizedInstance:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForEbsOptimizedInstance\n        Description: Disallow launch of EC2 instance types that are not EBS-optimized - Checks whether EBS optimization is enabled for your EC2 instances that can be EBS-optimized\n        Source:\n          Owner: AWS\n          SourceIdentifier: EBS_OPTIMIZED_INSTANCE\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::EC2::Instance\n    CheckForEc2VolumesInUse:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForEc2VolumesInUs\n        Description: Disallow EBS volumes that are unattached to an EC2 instance - Checks whether EBS volumes are attached to EC2 instances\n        InputParameters:\n          deleteOnTermination: true\n        Source:\n          Owner: AWS\n          SourceIdentifier: EC2_VOLUME_INUSE_CHECK\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::EC2::Volume\n    CheckForEncryptedVolumes:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForEncryptedVolumes\n        Description: Enable encryption for EBS volumes attached to EC2 instances - Checks whether EBS volumes that are in an attached state are encrypted.\n        Source:\n          Owner: AWS\n          SourceIdentifier: ENCRYPTED_VOLUMES\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::EC2::Volume\n    CheckForIAMUserMFA:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForIAMUserMFA\n        Description: Disallow access to IAM users without MFA - Checks whether the AWS Identity and Access Management users have multi-factor authentication (MFA) enabled. The rule is COMPLIANT if MFA is enabled.\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_USER_MFA_ENABLED\n        MaximumExecutionFrequency: One_Hour\n    CheckForIAMUserConsoleMFA:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForIAMUserConsoleMFA\n        Description: Disallow console access to IAM users without MFA - Checks whether AWS Multi-Factor Authentication (MFA) is enabled for all AWS Identity and Access Management (IAM) users that use a console password. The rule is COMPLIANT if MFA is enabled.\n        Source:\n          Owner: AWS\n          SourceIdentifier: MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS\n        MaximumExecutionFrequency: One_Hour\n    CheckForRdsPublicAccess:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForRdsPublicAccess\n        Description: Disallow public access to RDS database instances - Checks whether the Amazon Relational Database Service (RDS) instances are not publicly accessible. The rule is non-compliant if the publiclyAccessible field is true in the instance configuration item.\n        Source:\n          Owner: AWS\n          SourceIdentifier: RDS_INSTANCE_PUBLIC_ACCESS_CHECK\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::RDS::DBInstance\n    CheckForPublicRdsSnapshots:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForPublicRdsSnapshots\n        Description: Disallow public access to RDS database snapshots - Checks if Amazon Relational Database Service (Amazon RDS) snapshots are public. The rule is non-compliant if any existing and new Amazon RDS snapshots are public.\n        Source:\n          Owner: AWS\n          SourceIdentifier: RDS_SNAPSHOTS_PUBLIC_PROHIBITED\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::RDS::DBSnapshot\n    CheckForRdsStorageEncryption:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForRdsStorageEncryption\n        Description: Disallow RDS database instances that are not storage encrypted - Checks whether storage encryption is enabled for your RDS DB instances.\n        Source:\n          Owner: AWS\n          SourceIdentifier: RDS_STORAGE_ENCRYPTED\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::RDS::DBInstance\n    CheckForRestrictedCommonPortsPolicy:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForRestrictedCommonPortsPolicy\n        Description: Disallow internet connection through RDP - Checks whether security groups that are in use disallow unrestricted incoming TCP traffic to the specified ports.\n        InputParameters:\n          blockedPort1: 20\n          blockedPort2: 21\n          blockedPort3: 3389\n          blockedPort4: 3306\n          blockedPort5: 4333\n        Scope:\n          ComplianceResourceTypes:\n          - AWS::EC2::SecurityGroup\n        Source:\n          Owner: AWS\n          SourceIdentifier: RESTRICTED_INCOMING_TRAFFIC\n    CheckForRestrictedSshPolicy:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForRestrictedSshPolicy\n        Description: Disallow internet connection through SSH - Checks whether security groups that are in use disallow unrestricted incoming SSH traffic.\n        Scope:\n          ComplianceResourceTypes:\n          - AWS::EC2::SecurityGroup\n        Source:\n          Owner: AWS\n          SourceIdentifier: INCOMING_SSH_DISABLED\n    CheckForRootMfa:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForRootMfa\n        Description: Enable MFA for the root user - Checks whether the root user of your AWS account requires multi-factor authentication for console sign-in.\n        Source:\n          Owner: AWS\n          SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED\n        MaximumExecutionFrequency: One_Hour\n    CheckForS3PublicRead:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForS3PublicRead\n        Description: Disallow public read access to S3 buckets - Checks that your S3 buckets do not allow public read access. If an S3 bucket policy or bucket ACL allows public read access, the bucket is noncompliant.\n        Source:\n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::S3::Bucket\n    CheckForS3PublicWrite:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForS3PublicWrite\n        Description: Disallow public write access to S3 buckets - Checks that your S3 buckets do not allow public write access. If an S3 bucket policy or bucket ACL allows public write access, the bucket is noncompliant.\n        Source:\n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_PUBLIC_WRITE_PROHIBITED\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::S3::Bucket\n    CheckForS3VersioningEnabled:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: CheckForS3VersioningEnabled\n        Description: Disallow S3 buckets that are not versioning enabled - Checks whether versioning is enabled for your S3 buckets.\n        Source:\n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_VERSIONING_ENABLED\n        Scope:\n          ComplianceResourceTypes:\n            - AWS::S3::Bucket  "
      },
      "DependsOn": [
        "ConfigPacksConfigRecorder41CB4109"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/ControlTowerDetectiveGuardRailsConformancePack"
      }
    },
    "ConfigPacksOperationalBestPracticesForIamConformancePackF6F0D5C9": {
      "Type": "AWS::Config::ConformancePack",
      "Properties": {
        "ConformancePackName": "Operational-Best-Practices-For-AWS-Identity-And-Access-Management",
        "ConformancePackInputParameters": [],
        "DeliveryS3Bucket": {
          "Ref": "ConfigPacksConfigBucket2FDEAE68"
        },
        "DeliveryS3KeyPrefix": "iam-bestpractices",
        "TemplateBody": "################################################################################\n#\n#   Conformance Pack:\n#     Operational Best Practices for AWS Identity and Access Management\n#\n#   See Parameters section for names and descriptions of required parameters.\n#\n################################################################################\n\nParameters:\n    AccessKeysRotatedParameterMaxAccessKeyAge:\n      Description: Maximum number of days without rotation. Default 90.\n      Type: String\n      Default: 90\n    IAMUserUnusedCredentialsCheckParameterMaxCredentialUsageAge:\n      Description: Maximum number of days a credential cannot be used. The default value\n        is 90 days.\n      Type: String\n      Default: 90\nResources:\n    AccessKeysRotated:\n      Properties:\n        ConfigRuleName: AccessKeysRotated\n        Description: Checks whether the active access keys are rotated within the number\n          of days specified in maxAccessKeyAge. The rule is non-compliant if the access\n          keys have not been rotated for more than maxAccessKeyAge number of days.\n        InputParameters:\n          maxAccessKeyAge:\n            Ref: AccessKeysRotatedParameterMaxAccessKeyAge\n        Source:\n          Owner: AWS\n          SourceIdentifier: ACCESS_KEYS_ROTATED\n      Type: AWS::Config::ConfigRule\n    IAMGroupHasUsersCheck:\n      Properties:\n        ConfigRuleName: IAMGroupHasUsersCheck\n        Description: Checks whether IAM groups have at least one IAM user.\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_GROUP_HAS_USERS_CHECK\n      Type: AWS::Config::ConfigRule\n    IAMPasswordPolicy:\n      Properties:\n        ConfigRuleName: IAMPasswordPolicy\n        Description: Checks whether the account password policy for IAM users meets\n          the specified requirements.\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_PASSWORD_POLICY\n      Type: AWS::Config::ConfigRule\n    IAMPolicyNoStatementsWithAdminAccess:\n      Properties:\n        ConfigRuleName: IAMPolicyNoStatementsWithAdminAccess\n        Description: 'Checks whether the default version of AWS Identity and Access\n          Management (IAM) policies do not have administrator access. If any statement\n          has \"Effect\": \"Allow\" with \"Action\": \"*\" over \"Resource\": \"*\", the rule is\n          non-compliant.'\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS\n      Type: AWS::Config::ConfigRule\n    IAMRootAccessKeyCheck:\n      Properties:\n        ConfigRuleName: IAMRootAccessKeyCheck\n        Description: Checks whether the root user access key is available. The rule\n          is compliant if the user access key does not exist.\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_ROOT_ACCESS_KEY_CHECK\n      Type: AWS::Config::ConfigRule\n    IAMUserGroupMembershipCheck:\n      Properties:\n        ConfigRuleName: IAMUserGroupMembershipCheck\n        Description: Checks whether IAM users are members of at least one IAM group.\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_USER_GROUP_MEMBERSHIP_CHECK\n      Type: AWS::Config::ConfigRule\n    IAMUserMFAEnabled:\n      Properties:\n        ConfigRuleName: IAMUserMFAEnabled\n        Description: Checks whether the AWS Identity and Access Management users have\n          multi-factor authentication (MFA) enabled.\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_USER_MFA_ENABLED\n      Type: AWS::Config::ConfigRule\n    IAMUserNoPoliciesCheck:\n      Properties:\n        ConfigRuleName: IAMUserNoPoliciesCheck\n        Description: Checks that none of your IAM users have policies attached. IAM\n          users must inherit permissions from IAM groups or roles.\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_USER_NO_POLICIES_CHECK\n      Type: AWS::Config::ConfigRule\n    IAMUserUnusedCredentialsCheck:\n      Properties:\n        ConfigRuleName: IAMUserUnusedCredentialsCheck\n        Description: Checks whether your AWS Identity and Access Management (IAM) users\n          have passwords or active access keys that have not been used within the specified\n          number of days you provided.\n        InputParameters:\n          maxCredentialUsageAge:\n            Ref: IAMUserUnusedCredentialsCheckParameterMaxCredentialUsageAge\n        Source:\n          Owner: AWS\n          SourceIdentifier: IAM_USER_UNUSED_CREDENTIALS_CHECK\n      Type: AWS::Config::ConfigRule\n    MFAEnabledForIAMConsoleAccess:\n      Properties:\n        ConfigRuleName: MFAEnabledForIAMConsoleAccess\n        Description: Checks whether AWS Multi-Factor Authentication (MFA) is enabled\n          for all AWS Identity and Access Management (IAM) users that use a console\n          password. The rule is compliant if MFA is enabled.\n        Source:\n          Owner: AWS\n          SourceIdentifier: MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS\n      Type: AWS::Config::ConfigRule\n    RootAccountHardwareMFAEnabled:\n      Properties:\n        ConfigRuleName: RootAccountHardwareMFAEnabled\n        Description: Checks whether your AWS account is enabled to use multi-factor\n          authentication (MFA) hardware device to sign in with root credentials.\n        Source:\n          Owner: AWS\n          SourceIdentifier: ROOT_ACCOUNT_HARDWARE_MFA_ENABLED\n      Type: AWS::Config::ConfigRule\n    RootAccountMFAEnabled:\n      Properties:\n        ConfigRuleName: RootAccountMFAEnabled\n        Description: Checks whether the root user of your AWS account requires multi-factor\n          authentication for console sign-in.\n        Source:\n          Owner: AWS\n          SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED\n      Type: AWS::Config::ConfigRule"
      },
      "DependsOn": [
        "ConfigPacksConfigRecorder41CB4109"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/OperationalBestPracticesForIamConformancePack"
      }
    },
    "ConfigPacksOperationalBestPracticesForS3ConformancePack7F38C015": {
      "Type": "AWS::Config::ConformancePack",
      "Properties": {
        "ConformancePackName": "Operational-Best-Practices-For-Amazon-S3",
        "ConformancePackInputParameters": [],
        "DeliveryS3Bucket": {
          "Ref": "ConfigPacksConfigBucket2FDEAE68"
        },
        "DeliveryS3KeyPrefix": "s3-bestpractices",
        "TemplateBody": "###############################################################################################\n#\n#   Conformance Pack:\n#     Operational Best Practices for Amazon S3\n#\n#    This pack contains AWS Config rules based on the best practice guidelines for Amazon S3.\n#\n###############################################################################################\n\nResources:\n    S3BucketPublicReadProhibited:\n      Type: AWS::Config::ConfigRule\n      Properties:\n        ConfigRuleName: S3BucketPublicReadProhibited\n        Description: >- \n          Checks that your Amazon S3 buckets do not allow public read access.\n          The rule checks the Block Public Access settings, the bucket policy, and the\n          bucket access control list (ACL).\n        Scope:\n          ComplianceResourceTypes:\n          - \"AWS::S3::Bucket\"\n        Source:\n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED\n        MaximumExecutionFrequency: Six_Hours\n    S3BucketPublicWriteProhibited: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: S3BucketPublicWriteProhibited\n        Description: \"Checks that your Amazon S3 buckets do not allow public write access. The rule checks the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_PUBLIC_WRITE_PROHIBITED\n        MaximumExecutionFrequency: Six_Hours\n    S3BucketReplicationEnabled: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: S3BucketReplicationEnabled\n        Description: \"Checks whether the Amazon S3 buckets have cross-region replication enabled.\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_REPLICATION_ENABLED\n    S3BucketSSLRequestsOnly: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: S3BucketSSLRequestsOnly\n        Description: \"Checks whether S3 buckets have policies that require requests to use Secure Socket Layer (SSL).\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_SSL_REQUESTS_ONLY\n    ServerSideReplicationEnabled: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: ServerSideReplicationEnabled\n        Description: \"Checks that your Amazon S3 bucket either has S3 default encryption enabled or that the S3 bucket policy explicitly denies put-object requests without server side encryption.\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED\n    S3BucketLoggingEnabled: \n      Type: \"AWS::Config::ConfigRule\"\n      Properties: \n        ConfigRuleName: S3BucketLoggingEnabled\n        Description: \"Checks whether logging is enabled for your S3 buckets.\"\n        Scope: \n          ComplianceResourceTypes: \n          - \"AWS::S3::Bucket\"\n        Source: \n          Owner: AWS\n          SourceIdentifier: S3_BUCKET_LOGGING_ENABLED"
      },
      "DependsOn": [
        "ConfigPacksConfigRecorder41CB4109"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/OperationalBestPracticesForS3ConformancePack"
      }
    },
    "ConfigPacksOperationalBestPracticesForNistCsfConformancePackFB810725": {
      "Type": "AWS::Config::ConformancePack",
      "Properties": {
        "ConformancePackName": "Operational-Best-Practices-for-NIST-CSF",
        "ConformancePackInputParameters": [],
        "DeliveryS3Bucket": {
          "Ref": "ConfigPacksConfigBucket2FDEAE68"
        },
        "DeliveryS3KeyPrefix": "nist-csf-bestpractices",
        "TemplateBody": "##################################################################################\n#\n#   Conformance Pack:\n#     Operational Best Practices for NIST CSF\n#\n#   This conformance pack helps verify compliance with NIST CSF requirements.\n#                                                                                 \n#   This Conformance Pack has been designed for compatibility with the majority of AWS \n#   regions and to not require setting of any Parameters. Additional managed rules that \n#   require parameters to be set for your environment and/or for your specific region can \n#   be found at https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html\n#\n#   See Parameters section for names and descriptions of required parameters. \n#\n##################################################################################\n\nParameters:\n  AccessKeysRotatedParamMaxAccessKeyAge:\n    Default: '90'\n    Type: String\n  AcmCertificateExpirationCheckParamDaysToExpiration:\n    Default: '90'\n    Type: String\n  GuarddutyNonArchivedFindingsParamDaysHighSev:\n    Default: '1'\n    Type: String\n  GuarddutyNonArchivedFindingsParamDaysLowSev:\n    Default: '30'\n    Type: String\n  GuarddutyNonArchivedFindingsParamDaysMediumSev:\n    Default: '7'\n    Type: String\n  IamPasswordPolicyParamMaxPasswordAge:\n    Default: '90'\n    Type: String\n  IamPasswordPolicyParamMinimumPasswordLength:\n    Default: '14'\n    Type: String\n  IamPasswordPolicyParamPasswordReusePrevention:\n    Default: '24'\n    Type: String\n  IamPasswordPolicyParamRequireLowercaseCharacters:\n    Default: 'TRUE'\n    Type: String\n  IamPasswordPolicyParamRequireNumbers:\n    Default: 'TRUE'\n    Type: String\n  IamPasswordPolicyParamRequireSymbols:\n    Default: 'TRUE'\n    Type: String\n  IamPasswordPolicyParamRequireUppercaseCharacters:\n    Default: 'TRUE'\n    Type: String\n  IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge:\n    Default: '90'\n    Type: String\n  RestrictedIncomingTrafficParamBlockedPort1:\n    Default: '20'\n    Type: String\n  RestrictedIncomingTrafficParamBlockedPort2:\n    Default: '21'\n    Type: String\n  RestrictedIncomingTrafficParamBlockedPort3:\n    Default: '3389'\n    Type: String\n  RestrictedIncomingTrafficParamBlockedPort4:\n    Default: '3306'\n    Type: String\n  RestrictedIncomingTrafficParamBlockedPort5:\n    Default: '4333'\n    Type: String\n  S3AccountLevelPublicAccessBlocksParamBlockPublicAcls:\n    Default: 'True'\n    Type: String\n  S3AccountLevelPublicAccessBlocksParamBlockPublicPolicy:\n    Default: 'True'\n    Type: String\n  S3AccountLevelPublicAccessBlocksParamIgnorePublicAcls:\n    Default: 'True'\n    Type: String\n  S3AccountLevelPublicAccessBlocksParamRestrictPublicBuckets:\n    Default: 'True'\n    Type: String\nResources:\n  AccessKeysRotated:\n    Properties:\n      ConfigRuleName: access-keys-rotated\n      InputParameters:\n        maxAccessKeyAge:\n          Fn::If:\n          - accessKeysRotatedParamMaxAccessKeyAge\n          - Ref: AccessKeysRotatedParamMaxAccessKeyAge\n          - Ref: AWS::NoValue\n      Source:\n        Owner: AWS\n        SourceIdentifier: ACCESS_KEYS_ROTATED\n    Type: AWS::Config::ConfigRule\n  AcmCertificateExpirationCheck:\n    Properties:\n      ConfigRuleName: acm-certificate-expiration-check\n      InputParameters:\n        daysToExpiration:\n          Fn::If:\n          - acmCertificateExpirationCheckParamDaysToExpiration\n          - Ref: AcmCertificateExpirationCheckParamDaysToExpiration\n          - Ref: AWS::NoValue\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::ACM::Certificate\n      Source:\n        Owner: AWS\n        SourceIdentifier: ACM_CERTIFICATE_EXPIRATION_CHECK\n    Type: AWS::Config::ConfigRule\n  AlbHttpToHttpsRedirectionCheck:\n    Properties:\n      ConfigRuleName: alb-http-to-https-redirection-check\n      Source:\n        Owner: AWS\n        SourceIdentifier: ALB_HTTP_TO_HTTPS_REDIRECTION_CHECK\n    Type: AWS::Config::ConfigRule\n  ApiGwCacheEnabledAndEncrypted:\n    Properties:\n      ConfigRuleName: api-gw-cache-enabled-and-encrypted\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::ApiGateway::Stage\n      Source:\n        Owner: AWS\n        SourceIdentifier: API_GW_CACHE_ENABLED_AND_ENCRYPTED\n    Type: AWS::Config::ConfigRule\n  ApiGwExecutionLoggingEnabled:\n    Properties:\n      ConfigRuleName: api-gw-execution-logging-enabled\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::ApiGateway::Stage\n        - AWS::ApiGatewayV2::Stage\n      Source:\n        Owner: AWS\n        SourceIdentifier: API_GW_EXECUTION_LOGGING_ENABLED\n    Type: AWS::Config::ConfigRule\n  AutoscalingGroupElbHealthcheckRequired:\n    Properties:\n      ConfigRuleName: autoscaling-group-elb-healthcheck-required\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::AutoScaling::AutoScalingGroup\n      Source:\n        Owner: AWS\n        SourceIdentifier: AUTOSCALING_GROUP_ELB_HEALTHCHECK_REQUIRED\n    Type: AWS::Config::ConfigRule\n  CloudTrailCloudWatchLogsEnabled:\n    Properties:\n      ConfigRuleName: cloud-trail-cloud-watch-logs-enabled\n      Source:\n        Owner: AWS\n        SourceIdentifier: CLOUD_TRAIL_CLOUD_WATCH_LOGS_ENABLED\n    Type: AWS::Config::ConfigRule\n  CloudTrailEnabled:\n    Properties:\n      ConfigRuleName: cloudtrail-enabled\n      Source:\n        Owner: AWS\n        SourceIdentifier: CLOUD_TRAIL_ENABLED\n    Type: AWS::Config::ConfigRule\n  CloudTrailEncryptionEnabled:\n    Properties:\n      ConfigRuleName: cloud-trail-encryption-enabled\n      Source:\n        Owner: AWS\n        SourceIdentifier: CLOUD_TRAIL_ENCRYPTION_ENABLED\n    Type: AWS::Config::ConfigRule\n  CloudTrailLogFileValidationEnabled:\n    Properties:\n      ConfigRuleName: cloud-trail-log-file-validation-enabled\n      Source:\n        Owner: AWS\n        SourceIdentifier: CLOUD_TRAIL_LOG_FILE_VALIDATION_ENABLED\n    Type: AWS::Config::ConfigRule\n  CloudtrailS3DataeventsEnabled:\n    Properties:\n      ConfigRuleName: cloudtrail-s3-dataevents-enabled\n      Source:\n        Owner: AWS\n        SourceIdentifier: CLOUDTRAIL_S3_DATAEVENTS_ENABLED\n    Type: AWS::Config::ConfigRule\n  CloudwatchAlarmActionCheck:\n    Properties:\n      ConfigRuleName: cloudwatch-alarm-action-check\n      InputParameters:\n        alarmActionRequired: 'TRUE'\n        insufficientDataActionRequired: 'TRUE'\n        okActionRequired: 'FALSE'\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::CloudWatch::Alarm\n      Source:\n        Owner: AWS\n        SourceIdentifier: CLOUDWATCH_ALARM_ACTION_CHECK\n    Type: AWS::Config::ConfigRule\n  CloudwatchLogGroupEncrypted:\n    Properties:\n      ConfigRuleName: cloudwatch-log-group-encrypted\n      Source:\n        Owner: AWS\n        SourceIdentifier: CLOUDWATCH_LOG_GROUP_ENCRYPTED\n    Type: AWS::Config::ConfigRule\n  CodebuildProjectEnvvarAwscredCheck:\n    Properties:\n      ConfigRuleName: codebuild-project-envvar-awscred-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::CodeBuild::Project\n      Source:\n        Owner: AWS\n        SourceIdentifier: CODEBUILD_PROJECT_ENVVAR_AWSCRED_CHECK\n    Type: AWS::Config::ConfigRule\n  CodebuildProjectSourceRepoUrlCheck:\n    Properties:\n      ConfigRuleName: codebuild-project-source-repo-url-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::CodeBuild::Project\n      Source:\n        Owner: AWS\n        SourceIdentifier: CODEBUILD_PROJECT_SOURCE_REPO_URL_CHECK\n    Type: AWS::Config::ConfigRule\n  DbInstanceBackupEnabled:\n    Properties:\n      ConfigRuleName: db-instance-backup-enabled\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::RDS::DBInstance\n      Source:\n        Owner: AWS\n        SourceIdentifier: DB_INSTANCE_BACKUP_ENABLED\n    Type: AWS::Config::ConfigRule\n  DmsReplicationNotPublic:\n    Properties:\n      ConfigRuleName: dms-replication-not-public\n      Scope:\n        ComplianceResourceTypes: []\n      Source:\n        Owner: AWS\n        SourceIdentifier: DMS_REPLICATION_NOT_PUBLIC\n    Type: AWS::Config::ConfigRule\n  DynamodbAutoscalingEnabled:\n    Properties:\n      ConfigRuleName: dynamodb-autoscaling-enabled\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::DynamoDB::Table\n      Source:\n        Owner: AWS\n        SourceIdentifier: DYNAMODB_AUTOSCALING_ENABLED\n    Type: AWS::Config::ConfigRule\n  DynamodbPitrEnabled:\n    Properties:\n      ConfigRuleName: dynamodb-pitr-enabled\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::DynamoDB::Table\n      Source:\n        Owner: AWS\n        SourceIdentifier: DYNAMODB_PITR_ENABLED\n    Type: AWS::Config::ConfigRule\n  DynamodbThroughputLimitCheck:\n    Properties:\n      ConfigRuleName: dynamodb-throughput-limit-check\n      Source:\n        Owner: AWS\n        SourceIdentifier: DYNAMODB_THROUGHPUT_LIMIT_CHECK\n    Type: AWS::Config::ConfigRule\n  EbsOptimizedInstance:\n    Properties:\n      ConfigRuleName: ebs-optimized-instance\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::Instance\n      Source:\n        Owner: AWS\n        SourceIdentifier: EBS_OPTIMIZED_INSTANCE\n    Type: AWS::Config::ConfigRule\n  EbsSnapshotPublicRestorableCheck:\n    Properties:\n      ConfigRuleName: ebs-snapshot-public-restorable-check\n      Source:\n        Owner: AWS\n        SourceIdentifier: EBS_SNAPSHOT_PUBLIC_RESTORABLE_CHECK\n    Type: AWS::Config::ConfigRule\n  Ec2InstanceDetailedMonitoringEnabled:\n    Properties:\n      ConfigRuleName: ec2-instance-detailed-monitoring-enabled\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::Instance\n      Source:\n        Owner: AWS\n        SourceIdentifier: EC2_INSTANCE_DETAILED_MONITORING_ENABLED\n    Type: AWS::Config::ConfigRule\n  Ec2InstanceManagedBySsm:\n    Properties:\n      ConfigRuleName: ec2-instance-managed-by-systems-manager\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::Instance\n        - AWS::SSM::ManagedInstanceInventory\n      Source:\n        Owner: AWS\n        SourceIdentifier: EC2_INSTANCE_MANAGED_BY_SSM\n    Type: AWS::Config::ConfigRule\n  Ec2InstanceNoPublicIp:\n    Properties:\n      ConfigRuleName: ec2-instance-no-public-ip\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::Instance\n      Source:\n        Owner: AWS\n        SourceIdentifier: EC2_INSTANCE_NO_PUBLIC_IP\n    Type: AWS::Config::ConfigRule\n  Ec2ManagedinstanceAssociationComplianceStatusCheck:\n    Properties:\n      ConfigRuleName: ec2-managedinstance-association-compliance-status-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::SSM::AssociationCompliance\n      Source:\n        Owner: AWS\n        SourceIdentifier: EC2_MANAGEDINSTANCE_ASSOCIATION_COMPLIANCE_STATUS_CHECK\n    Type: AWS::Config::ConfigRule\n  Ec2ManagedinstancePatchComplianceStatusCheck:\n    Properties:\n      ConfigRuleName: ec2-managedinstance-patch-compliance-status-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::SSM::PatchCompliance\n      Source:\n        Owner: AWS\n        SourceIdentifier: EC2_MANAGEDINSTANCE_PATCH_COMPLIANCE_STATUS_CHECK\n    Type: AWS::Config::ConfigRule\n  Ec2SecurityGroupAttachedToEni:\n    Properties:\n      ConfigRuleName: ec2-security-group-attached-to-eni\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::SecurityGroup\n      Source:\n        Owner: AWS\n        SourceIdentifier: EC2_SECURITY_GROUP_ATTACHED_TO_ENI\n    Type: AWS::Config::ConfigRule\n  Ec2StoppedInstance:\n    Properties:\n      ConfigRuleName: ec2-stopped-instance\n      Source:\n        Owner: AWS\n        SourceIdentifier: EC2_STOPPED_INSTANCE\n    Type: AWS::Config::ConfigRule\n  Ec2VolumeInuseCheck:\n    Properties:\n      ConfigRuleName: ec2-volume-inuse-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::Volume\n      Source:\n        Owner: AWS\n        SourceIdentifier: EC2_VOLUME_INUSE_CHECK\n    Type: AWS::Config::ConfigRule\n  EfsEncryptedCheck:\n    Properties:\n      ConfigRuleName: efs-encrypted-check\n      Source:\n        Owner: AWS\n        SourceIdentifier: EFS_ENCRYPTED_CHECK\n    Type: AWS::Config::ConfigRule\n  EipAttached:\n    Properties:\n      ConfigRuleName: eip-attached\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::EIP\n      Source:\n        Owner: AWS\n        SourceIdentifier: EIP_ATTACHED\n    Type: AWS::Config::ConfigRule\n  ElasticacheRedisClusterAutomaticBackupCheck:\n    Properties:\n      ConfigRuleName: elasticache-redis-cluster-automatic-backup-check\n      Source:\n        Owner: AWS\n        SourceIdentifier: ELASTICACHE_REDIS_CLUSTER_AUTOMATIC_BACKUP_CHECK\n    Type: AWS::Config::ConfigRule\n  ElasticsearchEncryptedAtRest:\n    Properties:\n      ConfigRuleName: elasticsearch-encrypted-at-rest\n      Source:\n        Owner: AWS\n        SourceIdentifier: ELASTICSEARCH_ENCRYPTED_AT_REST\n    Type: AWS::Config::ConfigRule\n  ElasticsearchInVpcOnly:\n    Properties:\n      ConfigRuleName: elasticsearch-in-vpc-only\n      Source:\n        Owner: AWS\n        SourceIdentifier: ELASTICSEARCH_IN_VPC_ONLY\n    Type: AWS::Config::ConfigRule\n  ElbAcmCertificateRequired:\n    Properties:\n      ConfigRuleName: elb-acm-certificate-required\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::ElasticLoadBalancing::LoadBalancer\n      Source:\n        Owner: AWS\n        SourceIdentifier: ELB_ACM_CERTIFICATE_REQUIRED\n    Type: AWS::Config::ConfigRule\n  ElbDeletionProtectionEnabled:\n    Properties:\n      ConfigRuleName: elb-deletion-protection-enabled\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::ElasticLoadBalancingV2::LoadBalancer\n      Source:\n        Owner: AWS\n        SourceIdentifier: ELB_DELETION_PROTECTION_ENABLED\n    Type: AWS::Config::ConfigRule\n  ElbLoggingEnabled:\n    Properties:\n      ConfigRuleName: elb-logging-enabled\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::ElasticLoadBalancing::LoadBalancer\n        - AWS::ElasticLoadBalancingV2::LoadBalancer\n      Source:\n        Owner: AWS\n        SourceIdentifier: ELB_LOGGING_ENABLED\n    Type: AWS::Config::ConfigRule\n  EmrKerberosEnabled:\n    Properties:\n      ConfigRuleName: emr-kerberos-enabled\n      Source:\n        Owner: AWS\n        SourceIdentifier: EMR_KERBEROS_ENABLED\n    Type: AWS::Config::ConfigRule\n  EmrMasterNoPublicIp:\n    Properties:\n      ConfigRuleName: emr-master-no-public-ip\n      Scope:\n        ComplianceResourceTypes: []\n      Source:\n        Owner: AWS\n        SourceIdentifier: EMR_MASTER_NO_PUBLIC_IP\n    Type: AWS::Config::ConfigRule\n  EncryptedVolumes:\n    Properties:\n      ConfigRuleName: encrypted-volumes\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::Volume\n      Source:\n        Owner: AWS\n        SourceIdentifier: ENCRYPTED_VOLUMES\n    Type: AWS::Config::ConfigRule\n  GuarddutyEnabledCentralized:\n    Properties:\n      ConfigRuleName: guardduty-enabled-centralized\n      Source:\n        Owner: AWS\n        SourceIdentifier: GUARDDUTY_ENABLED_CENTRALIZED\n    Type: AWS::Config::ConfigRule\n  GuarddutyNonArchivedFindings:\n    Properties:\n      ConfigRuleName: guardduty-non-archived-findings\n      InputParameters:\n        daysHighSev:\n          Fn::If:\n          - guarddutyNonArchivedFindingsParamDaysHighSev\n          - Ref: GuarddutyNonArchivedFindingsParamDaysHighSev\n          - Ref: AWS::NoValue\n        daysLowSev:\n          Fn::If:\n          - guarddutyNonArchivedFindingsParamDaysLowSev\n          - Ref: GuarddutyNonArchivedFindingsParamDaysLowSev\n          - Ref: AWS::NoValue\n        daysMediumSev:\n          Fn::If:\n          - guarddutyNonArchivedFindingsParamDaysMediumSev\n          - Ref: GuarddutyNonArchivedFindingsParamDaysMediumSev\n          - Ref: AWS::NoValue\n      Source:\n        Owner: AWS\n        SourceIdentifier: GUARDDUTY_NON_ARCHIVED_FINDINGS\n    Type: AWS::Config::ConfigRule\n  IamGroupHasUsersCheck:\n    Properties:\n      ConfigRuleName: iam-group-has-users-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::IAM::Group\n      Source:\n        Owner: AWS\n        SourceIdentifier: IAM_GROUP_HAS_USERS_CHECK\n    Type: AWS::Config::ConfigRule\n  IamPasswordPolicy:\n    Properties:\n      ConfigRuleName: iam-password-policy\n      InputParameters:\n        MaxPasswordAge:\n          Fn::If:\n          - iamPasswordPolicyParamMaxPasswordAge\n          - Ref: IamPasswordPolicyParamMaxPasswordAge\n          - Ref: AWS::NoValue\n        MinimumPasswordLength:\n          Fn::If:\n          - iamPasswordPolicyParamMinimumPasswordLength\n          - Ref: IamPasswordPolicyParamMinimumPasswordLength\n          - Ref: AWS::NoValue\n        PasswordReusePrevention:\n          Fn::If:\n          - iamPasswordPolicyParamPasswordReusePrevention\n          - Ref: IamPasswordPolicyParamPasswordReusePrevention\n          - Ref: AWS::NoValue\n        RequireLowercaseCharacters:\n          Fn::If:\n          - iamPasswordPolicyParamRequireLowercaseCharacters\n          - Ref: IamPasswordPolicyParamRequireLowercaseCharacters\n          - Ref: AWS::NoValue\n        RequireNumbers:\n          Fn::If:\n          - iamPasswordPolicyParamRequireNumbers\n          - Ref: IamPasswordPolicyParamRequireNumbers\n          - Ref: AWS::NoValue\n        RequireSymbols:\n          Fn::If:\n          - iamPasswordPolicyParamRequireSymbols\n          - Ref: IamPasswordPolicyParamRequireSymbols\n          - Ref: AWS::NoValue\n        RequireUppercaseCharacters:\n          Fn::If:\n          - iamPasswordPolicyParamRequireUppercaseCharacters\n          - Ref: IamPasswordPolicyParamRequireUppercaseCharacters\n          - Ref: AWS::NoValue\n      Source:\n        Owner: AWS\n        SourceIdentifier: IAM_PASSWORD_POLICY\n    Type: AWS::Config::ConfigRule\n  IamPolicyNoStatementsWithAdminAccess:\n    Properties:\n      ConfigRuleName: iam-policy-no-statements-with-admin-access\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::IAM::Policy\n      Source:\n        Owner: AWS\n        SourceIdentifier: IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS\n    Type: AWS::Config::ConfigRule\n  IamRootAccessKeyCheck:\n    Properties:\n      ConfigRuleName: iam-root-access-key-check\n      Source:\n        Owner: AWS\n        SourceIdentifier: IAM_ROOT_ACCESS_KEY_CHECK\n    Type: AWS::Config::ConfigRule\n  IamUserGroupMembershipCheck:\n    Properties:\n      ConfigRuleName: iam-user-group-membership-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::IAM::User\n      Source:\n        Owner: AWS\n        SourceIdentifier: IAM_USER_GROUP_MEMBERSHIP_CHECK\n    Type: AWS::Config::ConfigRule\n  IamUserMfaEnabled:\n    Properties:\n      ConfigRuleName: iam-user-mfa-enabled\n      Source:\n        Owner: AWS\n        SourceIdentifier: IAM_USER_MFA_ENABLED\n    Type: AWS::Config::ConfigRule\n  IamUserNoPoliciesCheck:\n    Properties:\n      ConfigRuleName: iam-user-no-policies-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::IAM::User\n      Source:\n        Owner: AWS\n        SourceIdentifier: IAM_USER_NO_POLICIES_CHECK\n    Type: AWS::Config::ConfigRule\n  IamUserUnusedCredentialsCheck:\n    Properties:\n      ConfigRuleName: iam-user-unused-credentials-check\n      InputParameters:\n        maxCredentialUsageAge:\n          Fn::If:\n          - iamUserUnusedCredentialsCheckParamMaxCredentialUsageAge\n          - Ref: IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge\n          - Ref: AWS::NoValue\n      Source:\n        Owner: AWS\n        SourceIdentifier: IAM_USER_UNUSED_CREDENTIALS_CHECK\n    Type: AWS::Config::ConfigRule\n  IncomingSshDisabled:\n    Properties:\n      ConfigRuleName: restricted-ssh\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::SecurityGroup\n      Source:\n        Owner: AWS\n        SourceIdentifier: INCOMING_SSH_DISABLED\n    Type: AWS::Config::ConfigRule\n  InstancesInVpc:\n    Properties:\n      ConfigRuleName: ec2-instances-in-vpc\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::Instance\n      Source:\n        Owner: AWS\n        SourceIdentifier: INSTANCES_IN_VPC\n    Type: AWS::Config::ConfigRule\n  InternetGatewayAuthorizedVpcOnly:\n    Properties:\n      ConfigRuleName: internet-gateway-authorized-vpc-only\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::InternetGateway\n      Source:\n        Owner: AWS\n        SourceIdentifier: INTERNET_GATEWAY_AUTHORIZED_VPC_ONLY\n    Type: AWS::Config::ConfigRule\n  KmsCmkNotScheduledForDeletion:\n    Properties:\n      ConfigRuleName: kms-cmk-not-scheduled-for-deletion\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::KMS::Key\n      Source:\n        Owner: AWS\n        SourceIdentifier: KMS_CMK_NOT_SCHEDULED_FOR_DELETION\n    Type: AWS::Config::ConfigRule\n  LambdaConcurrencyCheck:\n    Properties:\n      ConfigRuleName: lambda-concurrency-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::Lambda::Function\n      Source:\n        Owner: AWS\n        SourceIdentifier: LAMBDA_CONCURRENCY_CHECK\n    Type: AWS::Config::ConfigRule\n  LambdaDlqCheck:\n    Properties:\n      ConfigRuleName: lambda-dlq-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::Lambda::Function\n      Source:\n        Owner: AWS\n        SourceIdentifier: LAMBDA_DLQ_CHECK\n    Type: AWS::Config::ConfigRule\n  LambdaFunctionPublicAccessProhibited:\n    Properties:\n      ConfigRuleName: lambda-function-public-access-prohibited\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::Lambda::Function\n      Source:\n        Owner: AWS\n        SourceIdentifier: LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED\n    Type: AWS::Config::ConfigRule\n  LambdaInsideVpc:\n    Properties:\n      ConfigRuleName: lambda-inside-vpc\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::Lambda::Function\n      Source:\n        Owner: AWS\n        SourceIdentifier: LAMBDA_INSIDE_VPC\n    Type: AWS::Config::ConfigRule\n  MfaEnabledForIamConsoleAccess:\n    Properties:\n      ConfigRuleName: mfa-enabled-for-iam-console-access\n      Source:\n        Owner: AWS\n        SourceIdentifier: MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS\n    Type: AWS::Config::ConfigRule\n  MultiRegionCloudTrailEnabled:\n    Properties:\n      ConfigRuleName: multi-region-cloudtrail-enabled\n      Source:\n        Owner: AWS\n        SourceIdentifier: MULTI_REGION_CLOUD_TRAIL_ENABLED\n    Type: AWS::Config::ConfigRule\n  RdsEnhancedMonitoringEnabled:\n    Properties:\n      ConfigRuleName: rds-enhanced-monitoring-enabled\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::RDS::DBInstance\n      Source:\n        Owner: AWS\n        SourceIdentifier: RDS_ENHANCED_MONITORING_ENABLED\n    Type: AWS::Config::ConfigRule\n  RdsInstancePublicAccessCheck:\n    Properties:\n      ConfigRuleName: rds-instance-public-access-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::RDS::DBInstance\n      Source:\n        Owner: AWS\n        SourceIdentifier: RDS_INSTANCE_PUBLIC_ACCESS_CHECK\n    Type: AWS::Config::ConfigRule\n  RdsMultiAzSupport:\n    Properties:\n      ConfigRuleName: rds-multi-az-support\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::RDS::DBInstance\n      Source:\n        Owner: AWS\n        SourceIdentifier: RDS_MULTI_AZ_SUPPORT\n    Type: AWS::Config::ConfigRule\n  RdsSnapshotsPublicProhibited:\n    Properties:\n      ConfigRuleName: rds-snapshots-public-prohibited\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::RDS::DBSnapshot\n        - AWS::RDS::DBClusterSnapshot\n      Source:\n        Owner: AWS\n        SourceIdentifier: RDS_SNAPSHOTS_PUBLIC_PROHIBITED\n    Type: AWS::Config::ConfigRule\n  RdsStorageEncrypted:\n    Properties:\n      ConfigRuleName: rds-storage-encrypted\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::RDS::DBInstance\n      Source:\n        Owner: AWS\n        SourceIdentifier: RDS_STORAGE_ENCRYPTED\n    Type: AWS::Config::ConfigRule\n  RedshiftClusterConfigurationCheck:\n    Properties:\n      ConfigRuleName: redshift-cluster-configuration-check\n      InputParameters:\n        clusterDbEncrypted: 'TRUE'\n        loggingEnabled: 'TRUE'\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::Redshift::Cluster\n      Source:\n        Owner: AWS\n        SourceIdentifier: REDSHIFT_CLUSTER_CONFIGURATION_CHECK\n    Type: AWS::Config::ConfigRule\n  RedshiftClusterPublicAccessCheck:\n    Properties:\n      ConfigRuleName: redshift-cluster-public-access-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::Redshift::Cluster\n      Source:\n        Owner: AWS\n        SourceIdentifier: REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK\n    Type: AWS::Config::ConfigRule\n  RedshiftRequireTlsSsl:\n    Properties:\n      ConfigRuleName: redshift-require-tls-ssl\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::Redshift::Cluster\n      Source:\n        Owner: AWS\n        SourceIdentifier: REDSHIFT_REQUIRE_TLS_SSL\n    Type: AWS::Config::ConfigRule\n  RestrictedIncomingTraffic:\n    Properties:\n      ConfigRuleName: restricted-common-ports\n      InputParameters:\n        blockedPort1:\n          Fn::If:\n          - restrictedIncomingTrafficParamBlockedPort1\n          - Ref: RestrictedIncomingTrafficParamBlockedPort1\n          - Ref: AWS::NoValue\n        blockedPort2:\n          Fn::If:\n          - restrictedIncomingTrafficParamBlockedPort2\n          - Ref: RestrictedIncomingTrafficParamBlockedPort2\n          - Ref: AWS::NoValue\n        blockedPort3:\n          Fn::If:\n          - restrictedIncomingTrafficParamBlockedPort3\n          - Ref: RestrictedIncomingTrafficParamBlockedPort3\n          - Ref: AWS::NoValue\n        blockedPort4:\n          Fn::If:\n          - restrictedIncomingTrafficParamBlockedPort4\n          - Ref: RestrictedIncomingTrafficParamBlockedPort4\n          - Ref: AWS::NoValue\n        blockedPort5:\n          Fn::If:\n          - restrictedIncomingTrafficParamBlockedPort5\n          - Ref: RestrictedIncomingTrafficParamBlockedPort5\n          - Ref: AWS::NoValue\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::SecurityGroup\n      Source:\n        Owner: AWS\n        SourceIdentifier: RESTRICTED_INCOMING_TRAFFIC\n    Type: AWS::Config::ConfigRule\n  RootAccountHardwareMfaEnabled:\n    Properties:\n      ConfigRuleName: root-account-hardware-mfa-enabled\n      Source:\n        Owner: AWS\n        SourceIdentifier: ROOT_ACCOUNT_HARDWARE_MFA_ENABLED\n    Type: AWS::Config::ConfigRule\n  RootAccountMfaEnabled:\n    Properties:\n      ConfigRuleName: root-account-mfa-enabled\n      Source:\n        Owner: AWS\n        SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED\n    Type: AWS::Config::ConfigRule\n  S3AccountLevelPublicAccessBlocks:\n    Properties:\n      ConfigRuleName: s3-account-level-public-access-blocks\n      InputParameters:\n        BlockPublicAcls:\n          Fn::If:\n          - s3AccountLevelPublicAccessBlocksParamBlockPublicAcls\n          - Ref: S3AccountLevelPublicAccessBlocksParamBlockPublicAcls\n          - Ref: AWS::NoValue\n        BlockPublicPolicy:\n          Fn::If:\n          - s3AccountLevelPublicAccessBlocksParamBlockPublicPolicy\n          - Ref: S3AccountLevelPublicAccessBlocksParamBlockPublicPolicy\n          - Ref: AWS::NoValue\n        IgnorePublicAcls:\n          Fn::If:\n          - s3AccountLevelPublicAccessBlocksParamIgnorePublicAcls\n          - Ref: S3AccountLevelPublicAccessBlocksParamIgnorePublicAcls\n          - Ref: AWS::NoValue\n        RestrictPublicBuckets:\n          Fn::If:\n          - s3AccountLevelPublicAccessBlocksParamRestrictPublicBuckets\n          - Ref: S3AccountLevelPublicAccessBlocksParamRestrictPublicBuckets\n          - Ref: AWS::NoValue\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::S3::AccountPublicAccessBlock\n      Source:\n        Owner: AWS\n        SourceIdentifier: S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS\n    Type: AWS::Config::ConfigRule\n  S3BucketDefaultLockEnabled:\n    Properties:\n      ConfigRuleName: s3-bucket-default-lock-enabled\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::S3::Bucket\n      Source:\n        Owner: AWS\n        SourceIdentifier: S3_BUCKET_DEFAULT_LOCK_ENABLED\n    Type: AWS::Config::ConfigRule\n  S3BucketLoggingEnabled:\n    Properties:\n      ConfigRuleName: s3-bucket-logging-enabled\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::S3::Bucket\n      Source:\n        Owner: AWS\n        SourceIdentifier: S3_BUCKET_LOGGING_ENABLED\n    Type: AWS::Config::ConfigRule\n  S3BucketPolicyGranteeCheck:\n    Properties:\n      ConfigRuleName: s3-bucket-policy-grantee-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::S3::Bucket\n      Source:\n        Owner: AWS\n        SourceIdentifier: S3_BUCKET_POLICY_GRANTEE_CHECK\n    Type: AWS::Config::ConfigRule\n  S3BucketPublicReadProhibited:\n    Properties:\n      ConfigRuleName: s3-bucket-public-read-prohibited\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::S3::Bucket\n      Source:\n        Owner: AWS\n        SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED\n    Type: AWS::Config::ConfigRule\n  S3BucketPublicWriteProhibited:\n    Properties:\n      ConfigRuleName: s3-bucket-public-write-prohibited\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::S3::Bucket\n      Source:\n        Owner: AWS\n        SourceIdentifier: S3_BUCKET_PUBLIC_WRITE_PROHIBITED\n    Type: AWS::Config::ConfigRule\n  S3BucketReplicationEnabled:\n    Properties:\n      ConfigRuleName: s3-bucket-replication-enabled\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::S3::Bucket\n      Source:\n        Owner: AWS\n        SourceIdentifier: S3_BUCKET_REPLICATION_ENABLED\n    Type: AWS::Config::ConfigRule\n  S3BucketServerSideEncryptionEnabled:\n    Properties:\n      ConfigRuleName: s3-bucket-server-side-encryption-enabled\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::S3::Bucket\n      Source:\n        Owner: AWS\n        SourceIdentifier: S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED\n    Type: AWS::Config::ConfigRule\n  S3BucketSslRequestsOnly:\n    Properties:\n      ConfigRuleName: s3-bucket-ssl-requests-only\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::S3::Bucket\n      Source:\n        Owner: AWS\n        SourceIdentifier: S3_BUCKET_SSL_REQUESTS_ONLY\n    Type: AWS::Config::ConfigRule\n  S3BucketVersioningEnabled:\n    Properties:\n      ConfigRuleName: s3-bucket-versioning-enabled\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::S3::Bucket\n      Source:\n        Owner: AWS\n        SourceIdentifier: S3_BUCKET_VERSIONING_ENABLED\n    Type: AWS::Config::ConfigRule\n  SagemakerEndpointConfigurationKmsKeyConfigured:\n    Properties:\n      ConfigRuleName: sagemaker-endpoint-configuration-kms-key-configured\n      Source:\n        Owner: AWS\n        SourceIdentifier: SAGEMAKER_ENDPOINT_CONFIGURATION_KMS_KEY_CONFIGURED\n    Type: AWS::Config::ConfigRule\n  SagemakerNotebookInstanceKmsKeyConfigured:\n    Properties:\n      ConfigRuleName: sagemaker-notebook-instance-kms-key-configured\n      Source:\n        Owner: AWS\n        SourceIdentifier: SAGEMAKER_NOTEBOOK_INSTANCE_KMS_KEY_CONFIGURED\n    Type: AWS::Config::ConfigRule\n  SagemakerNotebookNoDirectInternetAccess:\n    Properties:\n      ConfigRuleName: sagemaker-notebook-no-direct-internet-access\n      Source:\n        Owner: AWS\n        SourceIdentifier: SAGEMAKER_NOTEBOOK_NO_DIRECT_INTERNET_ACCESS\n    Type: AWS::Config::ConfigRule\n  SecretsmanagerRotationEnabledCheck:\n    Properties:\n      ConfigRuleName: secretsmanager-rotation-enabled-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::SecretsManager::Secret\n      Source:\n        Owner: AWS\n        SourceIdentifier: SECRETSMANAGER_ROTATION_ENABLED_CHECK\n    Type: AWS::Config::ConfigRule\n  SecretsmanagerScheduledRotationSuccessCheck:\n    Properties:\n      ConfigRuleName: secretsmanager-scheduled-rotation-success-check\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::SecretsManager::Secret\n      Source:\n        Owner: AWS\n        SourceIdentifier: SECRETSMANAGER_SCHEDULED_ROTATION_SUCCESS_CHECK\n    Type: AWS::Config::ConfigRule\n  SecurityhubEnabled:\n    Properties:\n      ConfigRuleName: securityhub-enabled\n      Source:\n        Owner: AWS\n        SourceIdentifier: SECURITYHUB_ENABLED\n    Type: AWS::Config::ConfigRule\n  SnsEncryptedKms:\n    Properties:\n      ConfigRuleName: sns-encrypted-kms\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::SNS::Topic\n      Source:\n        Owner: AWS\n        SourceIdentifier: SNS_ENCRYPTED_KMS\n    Type: AWS::Config::ConfigRule\n  VpcDefaultSecurityGroupClosed:\n    Properties:\n      ConfigRuleName: vpc-default-security-group-closed\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::SecurityGroup\n      Source:\n        Owner: AWS\n        SourceIdentifier: VPC_DEFAULT_SECURITY_GROUP_CLOSED\n    Type: AWS::Config::ConfigRule\n  VpcFlowLogsEnabled:\n    Properties:\n      ConfigRuleName: vpc-flow-logs-enabled\n      Source:\n        Owner: AWS\n        SourceIdentifier: VPC_FLOW_LOGS_ENABLED\n    Type: AWS::Config::ConfigRule\n  VpcSgOpenOnlyToAuthorizedPorts:\n    Properties:\n      ConfigRuleName: vpc-sg-open-only-to-authorized-ports\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::SecurityGroup\n      Source:\n        Owner: AWS\n        SourceIdentifier: VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS\n    Type: AWS::Config::ConfigRule\n  VpcVpn2TunnelsUp:\n    Properties:\n      ConfigRuleName: vpc-vpn-2-tunnels-up\n      Scope:\n        ComplianceResourceTypes:\n        - AWS::EC2::VPNConnection\n      Source:\n        Owner: AWS\n        SourceIdentifier: VPC_VPN_2_TUNNELS_UP\n    Type: AWS::Config::ConfigRule\nConditions:\n  accessKeysRotatedParamMaxAccessKeyAge:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: AccessKeysRotatedParamMaxAccessKeyAge\n  acmCertificateExpirationCheckParamDaysToExpiration:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: AcmCertificateExpirationCheckParamDaysToExpiration\n  guarddutyNonArchivedFindingsParamDaysHighSev:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: GuarddutyNonArchivedFindingsParamDaysHighSev\n  guarddutyNonArchivedFindingsParamDaysLowSev:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: GuarddutyNonArchivedFindingsParamDaysLowSev\n  guarddutyNonArchivedFindingsParamDaysMediumSev:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: GuarddutyNonArchivedFindingsParamDaysMediumSev\n  iamPasswordPolicyParamMaxPasswordAge:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: IamPasswordPolicyParamMaxPasswordAge\n  iamPasswordPolicyParamMinimumPasswordLength:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: IamPasswordPolicyParamMinimumPasswordLength\n  iamPasswordPolicyParamPasswordReusePrevention:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: IamPasswordPolicyParamPasswordReusePrevention\n  iamPasswordPolicyParamRequireLowercaseCharacters:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: IamPasswordPolicyParamRequireLowercaseCharacters\n  iamPasswordPolicyParamRequireNumbers:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: IamPasswordPolicyParamRequireNumbers\n  iamPasswordPolicyParamRequireSymbols:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: IamPasswordPolicyParamRequireSymbols\n  iamPasswordPolicyParamRequireUppercaseCharacters:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: IamPasswordPolicyParamRequireUppercaseCharacters\n  iamUserUnusedCredentialsCheckParamMaxCredentialUsageAge:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: IamUserUnusedCredentialsCheckParamMaxCredentialUsageAge\n  restrictedIncomingTrafficParamBlockedPort1:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: RestrictedIncomingTrafficParamBlockedPort1\n  restrictedIncomingTrafficParamBlockedPort2:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: RestrictedIncomingTrafficParamBlockedPort2\n  restrictedIncomingTrafficParamBlockedPort3:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: RestrictedIncomingTrafficParamBlockedPort3\n  restrictedIncomingTrafficParamBlockedPort4:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: RestrictedIncomingTrafficParamBlockedPort4\n  restrictedIncomingTrafficParamBlockedPort5:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: RestrictedIncomingTrafficParamBlockedPort5\n  s3AccountLevelPublicAccessBlocksParamBlockPublicAcls:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: S3AccountLevelPublicAccessBlocksParamBlockPublicAcls\n  s3AccountLevelPublicAccessBlocksParamBlockPublicPolicy:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: S3AccountLevelPublicAccessBlocksParamBlockPublicPolicy\n  s3AccountLevelPublicAccessBlocksParamIgnorePublicAcls:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: S3AccountLevelPublicAccessBlocksParamIgnorePublicAcls\n  s3AccountLevelPublicAccessBlocksParamRestrictPublicBuckets:\n    Fn::Not:\n    - Fn::Equals:\n      - ''\n      - Ref: S3AccountLevelPublicAccessBlocksParamRestrictPublicBuckets"
      },
      "DependsOn": [
        "ConfigPacksConfigRecorder41CB4109"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/ConfigPacks/OperationalBestPracticesForNistCsfConformancePack"
      }
    },
    "DnsHostedZone9A2A44DA": {
      "Type": "AWS::Route53::HostedZone",
      "Properties": {
        "Name": "corp.",
        "VPCs": [
          {
            "VPCId": {
              "Ref": "VpcCoreManagment030DB556"
            },
            "VPCRegion": {
              "Ref": "AWS::Region"
            }
          },
          {
            "VPCId": {
              "Ref": "VpcCoreProductionD971AE3A"
            },
            "VPCRegion": {
              "Ref": "AWS::Region"
            }
          },
          {
            "VPCId": {
              "Ref": "VpcCoreDevelopment37E2B994"
            },
            "VPCRegion": {
              "Ref": "AWS::Region"
            }
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/Dns/HostedZone/Resource"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAAA11TTW/bMAz9Lbsr6ucOuy1zu65AURhOkcNuisw4amwxoKgEmeH/Ptpy7SAnPT7S/Hh4vtM/HvTtt5/mFBa23N+0Fgl0u2Jj9ypDH5iiZVVAwEgW1DIEYMlWzlcqi4GxmXLZ1l/i3JBpgIH6QFqVjh36TvWjWrD3ul0fbJ9b55nK46Z2dhU3HrjnZlRgZPgwmxpmfuZkH7TO9J2n4h48v+b98274xTCczFnl5I4C58avXnYT/FWQNhmjJYsCuwY8q5GRZZ99eUDneSy9CnMAElXkUg92WGgFNpLj8wthPAzbXxNZ7WTE+uAve03kh6EK+B34hLS/unQqWkbeIbl/Q6aISaYpOwjSKWca3RaYksObo+g9HJ1Qp8KDbn9Fu0/qjCg9c/Fl3KnaNJvSiF3k7hoY/e/o0+kTkG++cD9iYXoDBT34SNVYBd2+YTUJMmEBKyYwzcimoFMW/dZVuhX2CWp3BDpnOyOS16PNJBspiQFi5nLy3xapMd5CLtbuFPXCfJeTR1/8wcBQ/kU/SDRHnYwcbL6g0dtB54RHJ4075bEE/Rlujne3+v5RfqTP4NyComfXgC7S+x8xbResZAMAAA=="
      },
      "Metadata": {
        "aws:cdk:path": "AwsStartupBlueprintStack/CDKMetadata/Default"
      },
      "Condition": "CDKMetadataAvailable"
    }
  },
  "Parameters": {
    "AssetParametersc691172cdeefa2c91b5a2907f9d81118e47597634943344795f1a844192dd49cS3BucketEAC9DD43": {
      "Type": "String",
      "Description": "S3 bucket for asset \"c691172cdeefa2c91b5a2907f9d81118e47597634943344795f1a844192dd49c\""
    },
    "AssetParametersc691172cdeefa2c91b5a2907f9d81118e47597634943344795f1a844192dd49cS3VersionKeyDD9AE9E7": {
      "Type": "String",
      "Description": "S3 key for asset version \"c691172cdeefa2c91b5a2907f9d81118e47597634943344795f1a844192dd49c\""
    },
    "AssetParametersc691172cdeefa2c91b5a2907f9d81118e47597634943344795f1a844192dd49cArtifactHash627DAAA7": {
      "Type": "String",
      "Description": "Artifact hash for asset \"c691172cdeefa2c91b5a2907f9d81118e47597634943344795f1a844192dd49c\""
    }
  },
  "Conditions": {
    "CDKMetadataAvailable": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "cn-northwest-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "me-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-2"
              ]
            }
          ]
        }
      ]
    }
  }
}